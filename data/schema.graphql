"""
Mapping table for the album and Lightroom Collection. This allows us to disconnect the Album and make connections to other service providers.
"""
type _AlbumLightroomCollection {
  """
  Reads a single `Album` that is related to this `_AlbumLightroomCollection`.
  """
  album: Album

  """
  Album ID.
  """
  albumId: Int!

  """
  Reads a single `LightroomCollection` that is related to this `_AlbumLightroomCollection`.
  """
  collection: LightroomCollection

  """
  Lightroom Collection ID.
  """
  collectionId: Int!
}

"""
A condition to be used against `_AlbumLightroomCollection` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _AlbumLightroomCollectionCondition {
  """
  Checks for equality with the object’s `albumId` field.
  """
  albumId: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int
}

"""
A filter to be used against `_AlbumLightroomCollection` object types. All fields are combined with a logical ‘and.’
"""
input _AlbumLightroomCollectionFilter {
  """
  Filter by the object’s `albumId` field.
  """
  albumId: IntFilter

  """
  Checks for all expressions in this list.
  """
  and: [_AlbumLightroomCollectionFilter!]

  """
  Filter by the object’s `collectionId` field.
  """
  collectionId: IntFilter

  """
  Negates the expression.
  """
  not: _AlbumLightroomCollectionFilter

  """
  Checks for any expressions in this list.
  """
  or: [_AlbumLightroomCollectionFilter!]
}

"""
A connection to a list of `_AlbumLightroomCollection` values.
"""
type _AlbumLightroomCollectionsConnection {
  """
  A list of edges which contains the `_AlbumLightroomCollection` and cursor to aid in pagination.
  """
  edges: [_AlbumLightroomCollectionsEdge!]!

  """
  A list of `_AlbumLightroomCollection` objects.
  """
  nodes: [_AlbumLightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `_AlbumLightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `_AlbumLightroomCollection` edge in the connection.
"""
type _AlbumLightroomCollectionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `_AlbumLightroomCollection` at the end of the edge.
  """
  node: _AlbumLightroomCollection!
}

"""
Methods to use when ordering `_AlbumLightroomCollection`.
"""
enum _AlbumLightroomCollectionsOrderBy {
  ALBUM_ID_ASC
  ALBUM_ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  NATURAL
}

"""
All user albums
"""
type Album implements Node {
  """
  Reads and enables pagination through a set of `_AlbumLightroomCollection`.
  """
  _albumLightroomCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _AlbumLightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _AlbumLightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `_AlbumLightroomCollection`.
    """
    orderBy: [_AlbumLightroomCollectionsOrderBy!] = [NATURAL]
  ): _AlbumLightroomCollectionsConnection!

  """
  Reads and enables pagination through a set of `AlbumMedia`.
  """
  albumMedias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaConnection!

  """
  Content address of the album TODO
  """
  cid: String!
  createdAt: Datetime!

  """
  Album description
  """
  description: String
  id: Int!

  """
  Is album visible to other users
  """
  isPrivate: Boolean!

  """
  If album is smart user can set specific rules on how to automatically add photos to it
  """
  isSmart: Boolean!

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  lrCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumLrCollectionsManyToManyConnection!

  """
  Reads and enables pagination through a set of `Media`.
  """
  media(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaManyToManyConnection!

  """
  Album metadata
  """
  metadata: JSON!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  URL-friendly album slug
  """
  slug: String

  """
  The smart album rules
  """
  smartRules: JSON!

  """
  Album title
  """
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Album` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AlbumCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
A filter to be used against `Album` object types. All fields are combined with a logical ‘and.’
"""
input AlbumFilter {
  """
  Checks for all expressions in this list.
  """
  and: [AlbumFilter!]

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Negates the expression.
  """
  not: AlbumFilter

  """
  Checks for any expressions in this list.
  """
  or: [AlbumFilter!]
}

"""
An input for mutations affecting `Album`
"""
input AlbumInput {
  """
  Content address of the album TODO
  """
  cid: String!
  createdAt: Datetime

  """
  Album description
  """
  description: String

  """
  Is album visible to other users
  """
  isPrivate: Boolean

  """
  If album is smart user can set specific rules on how to automatically add photos to it
  """
  isSmart: Boolean

  """
  Album metadata
  """
  metadata: JSON

  """
  URL-friendly album slug
  """
  slug: String

  """
  The smart album rules
  """
  smartRules: JSON

  """
  Album title
  """
  title: String
  updatedAt: Datetime
}

"""
A connection to a list of `LightroomCollection` values, with data from `_AlbumLightroomCollection`.
"""
type AlbumLrCollectionsManyToManyConnection {
  """
  A list of edges which contains the `LightroomCollection`, info from the `_AlbumLightroomCollection`, and the cursor to aid in pagination.
  """
  edges: [AlbumLrCollectionsManyToManyEdge!]!

  """
  A list of `LightroomCollection` objects.
  """
  nodes: [LightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCollection` edge in the connection, with data from `_AlbumLightroomCollection`.
"""
type AlbumLrCollectionsManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomCollection` at the end of the edge.
  """
  node: LightroomCollection!
}

"""
Mapping table between albums and media
"""
type AlbumMedia implements Node {
  """
  Reads a single `Album` that is related to this `AlbumMedia`.
  """
  album: Album
  albumId: Int!

  """
  Reads a single `Media` that is related to this `AlbumMedia`.
  """
  media: Media
  mediaId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `AlbumMedia` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AlbumMediaCondition {
  """
  Checks for equality with the object’s `albumId` field.
  """
  albumId: Int

  """
  Checks for equality with the object’s `mediaId` field.
  """
  mediaId: Int
}

"""
A connection to a list of `AlbumMedia` values.
"""
type AlbumMediaConnection {
  """
  A list of edges which contains the `AlbumMedia` and cursor to aid in pagination.
  """
  edges: [AlbumMediaEdge!]!

  """
  A list of `AlbumMedia` objects.
  """
  nodes: [AlbumMedia!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `AlbumMedia` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AlbumMedia` edge in the connection.
"""
type AlbumMediaEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `AlbumMedia` at the end of the edge.
  """
  node: AlbumMedia!
}

"""
A filter to be used against `AlbumMedia` object types. All fields are combined with a logical ‘and.’
"""
input AlbumMediaFilter {
  """
  Filter by the object’s `albumId` field.
  """
  albumId: IntFilter

  """
  Checks for all expressions in this list.
  """
  and: [AlbumMediaFilter!]

  """
  Filter by the object’s `mediaId` field.
  """
  mediaId: IntFilter

  """
  Negates the expression.
  """
  not: AlbumMediaFilter

  """
  Checks for any expressions in this list.
  """
  or: [AlbumMediaFilter!]
}

"""
An input for mutations affecting `AlbumMedia`
"""
input AlbumMediaInput {
  albumId: Int!
  mediaId: Int!
}

"""
A connection to a list of `Media` values, with data from `AlbumMedia`.
"""
type AlbumMediaManyToManyConnection {
  """
  A list of edges which contains the `Media`, info from the `AlbumMedia`, and the cursor to aid in pagination.
  """
  edges: [AlbumMediaManyToManyEdge!]!

  """
  A list of `Media` objects.
  """
  nodes: [Media!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Media` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Media` edge in the connection, with data from `AlbumMedia`.
"""
type AlbumMediaManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Media` at the end of the edge.
  """
  node: Media!
}

"""
Methods to use when ordering `AlbumMedia`.
"""
enum AlbumMediaOrderBy {
  ALBUM_ID_ASC
  ALBUM_ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `AlbumMedia`. Fields that are set will be updated.
"""
input AlbumMediaPatch {
  albumId: Int
  mediaId: Int
}

"""
Represents an update to a `Album`. Fields that are set will be updated.
"""
input AlbumPatch {
  """
  Content address of the album TODO
  """
  cid: String
  createdAt: Datetime

  """
  Album description
  """
  description: String

  """
  Is album visible to other users
  """
  isPrivate: Boolean

  """
  If album is smart user can set specific rules on how to automatically add photos to it
  """
  isSmart: Boolean

  """
  Album metadata
  """
  metadata: JSON

  """
  URL-friendly album slug
  """
  slug: String

  """
  The smart album rules
  """
  smartRules: JSON

  """
  Album title
  """
  title: String
  updatedAt: Datetime
}

"""
A connection to a list of `Album` values.
"""
type AlbumsConnection {
  """
  A list of edges which contains the `Album` and cursor to aid in pagination.
  """
  edges: [AlbumsEdge!]!

  """
  A list of `Album` objects.
  """
  nodes: [Album!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Album` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Album` edge in the connection.
"""
type AlbumsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Album` at the end of the edge.
  """
  node: Album!
}

"""
Methods to use when ordering `Album`.
"""
enum AlbumsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

input AuthServiceInput {
  details: JSON
  identifier: String
  service: String
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Boolean

  """
  Greater than the specified value.
  """
  greaterThan: Boolean

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Boolean

  """
  Included in the specified list.
  """
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Less than the specified value.
  """
  lessThan: Boolean

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Boolean

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Boolean

  """
  Not equal to the specified value.
  """
  notEqualTo: Boolean

  """
  Not included in the specified list.
  """
  notIn: [Boolean!]
}

"""
All copyright statements references to the media. Full statement info should be fetched from the network using either polkadot.js app, network interface or network js-api
"""
type Copyright implements Node {
  id: Int!

  """
  Reads a single `Media` that is related to this `Copyright`.
  """
  media: Media

  """
  Internal Media <-> Ownership mapping
  """
  mediaId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  URN based signer address urn:pgp:key-fingerprint
  """
  signer: String!

  """
  Statement ID in its noraml form. To use this for fetching the data you need to HEX encode it and prefix it with 0x
  """
  statementId: String!
}

"""
A condition to be used against `Copyright` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CopyrightCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `mediaId` field.
  """
  mediaId: Int

  """
  Checks for equality with the object’s `statementId` field.
  """
  statementId: String
}

"""
A filter to be used against `Copyright` object types. All fields are combined with a logical ‘and.’
"""
input CopyrightFilter {
  """
  Checks for all expressions in this list.
  """
  and: [CopyrightFilter!]

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `mediaId` field.
  """
  mediaId: IntFilter

  """
  Negates the expression.
  """
  not: CopyrightFilter

  """
  Checks for any expressions in this list.
  """
  or: [CopyrightFilter!]

  """
  Filter by the object’s `statementId` field.
  """
  statementId: StringFilter
}

"""
An input for mutations affecting `Copyright`
"""
input CopyrightInput {
  id: Int

  """
  Internal Media <-> Ownership mapping
  """
  mediaId: Int

  """
  URN based signer address urn:pgp:key-fingerprint
  """
  signer: String!

  """
  Statement ID in its noraml form. To use this for fetching the data you need to HEX encode it and prefix it with 0x
  """
  statementId: String!
}

"""
Represents an update to a `Copyright`. Fields that are set will be updated.
"""
input CopyrightPatch {
  id: Int

  """
  Internal Media <-> Ownership mapping
  """
  mediaId: Int

  """
  URN based signer address urn:pgp:key-fingerprint
  """
  signer: String

  """
  Statement ID in its noraml form. To use this for fetching the data you need to HEX encode it and prefix it with 0x
  """
  statementId: String
}

"""
A connection to a list of `Copyright` values.
"""
type CopyrightsConnection {
  """
  A list of edges which contains the `Copyright` and cursor to aid in pagination.
  """
  edges: [CopyrightsEdge!]!

  """
  A list of `Copyright` objects.
  """
  nodes: [Copyright!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Copyright` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Copyright` edge in the connection.
"""
type CopyrightsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Copyright` at the end of the edge.
  """
  node: Copyright!
}

"""
Methods to use when ordering `Copyright`.
"""
enum CopyrightsOrderBy {
  ID_ASC
  ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATEMENT_ID_ASC
  STATEMENT_ID_DESC
}

"""
All input for the create `Album` mutation.
"""
input CreateAlbumInput {
  """
  The `Album` to be created by this mutation.
  """
  album: AlbumInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
All input for the create `AlbumMedia` mutation.
"""
input CreateAlbumMediaInput {
  """
  The `AlbumMedia` to be created by this mutation.
  """
  albumMedia: AlbumMediaInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
The output of our create `AlbumMedia` mutation.
"""
type CreateAlbumMediaPayload {
  """
  Reads a single `Album` that is related to this `AlbumMedia`.
  """
  album: Album

  """
  The `AlbumMedia` that was created by this mutation.
  """
  albumMedia: AlbumMedia

  """
  An edge for our `AlbumMedia`. May be used by Relay 1.
  """
  albumMediaEdge(
    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `AlbumMedia`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The output of our create `Album` mutation.
"""
type CreateAlbumPayload {
  """
  The `Album` that was created by this mutation.
  """
  album: Album

  """
  An edge for our `Album`. May be used by Relay 1.
  """
  albumEdge(
    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `Copyright` mutation.
"""
input CreateCopyrightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Copyright` to be created by this mutation.
  """
  copyright: CopyrightInput!
}

"""
The output of our create `Copyright` mutation.
"""
type CreateCopyrightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Copyright` that was created by this mutation.
  """
  copyright: Copyright

  """
  An edge for our `Copyright`. May be used by Relay 1.
  """
  copyrightEdge(
    """
    The method to use when ordering `Copyright`.
    """
    orderBy: [CopyrightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CopyrightsEdge

  """
  Reads a single `Media` that is related to this `Copyright`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `Device` mutation.
"""
input CreateDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Device` to be created by this mutation.
  """
  device: DeviceInput!
}

"""
The output of our create `Device` mutation.
"""
type CreateDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Device` that was created by this mutation.
  """
  device: Device

  """
  An edge for our `Device`. May be used by Relay 1.
  """
  deviceEdge(
    """
    The method to use when ordering `Device`.
    """
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `Media` mutation.
"""
input CreateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Media` to be created by this mutation.
  """
  media: MediaInput!
}

"""
The output of our create `Media` mutation.
"""
type CreateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `Media`.
  """
  masterMedia: Media

  """
  The `Media` that was created by this mutation.
  """
  media: Media

  """
  An edge for our `Media`. May be used by Relay 1.
  """
  mediaEdge(
    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `Rendition` mutation.
"""
input CreateRenditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Rendition` to be created by this mutation.
  """
  rendition: RenditionInput!
}

"""
The output of our create `Rendition` mutation.
"""
type CreateRenditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `Rendition`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Rendition` that was created by this mutation.
  """
  rendition: Rendition

  """
  An edge for our `Rendition`. May be used by Relay 1.
  """
  renditionEdge(
    """
    The method to use when ordering `Rendition`.
    """
    orderBy: [RenditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RenditionsEdge
}

"""
All input for the create `UserEmail` mutation.
"""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `UserEmail` to be created by this mutation.
  """
  userEmail: UserEmailInput!
}

"""
The output of our create `UserEmail` mutation.
"""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `UserEmail`.
  """
  user: User

  """
  The `UserEmail` that was created by this mutation.
  """
  userEmail: UserEmail

  """
  An edge for our `UserEmail`. May be used by Relay 1.
  """
  userEmailEdge(
    """
    The method to use when ordering `UserEmail`.
    """
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
Users crypto keys. This type is contextual for a incoming JWT.
"""
type CryptoKey implements Node {
  algorithm: String

  """
  content address identifier @anagolay/op-an-cid
  """
  cid: String!
  createdAt: Datetime!
  creationTime: Datetime!
  curve: String
  expirationTime: Datetime

  """
  unique key indentifier. more info -> https://tools.ietf.org/html/rfc4880#section-12.2
  hex encoding
  """
  fingerprint: String!
  id: Int!

  """
  options are p3skb, pgp
  """
  implementation: String!

  """
  primary key to be used for the operations
  """
  isPrimary: Boolean!

  """
  A Key ID is an eight-octet scalar that identifies a key. more info -> https://tools.ietf.org/html/rfc4880#section-3.3
  hex encoded
  """
  keyId: String!

  """
  User firendly KEY name. Example: `My main key`
  """
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Multibase encoded armored key
  """
  privateKey: String!

  """
  Multibase encoded armored key
  """
  publicKey: String!

  """
  Slug of the key name.
  """
  slug: String
  updatedAt: Datetime!

  """
  Reads a single `User` that is related to this `CryptoKey`.
  """
  user: User
  userId: Int!
}

"""
A condition to be used against `CryptoKey` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CryptoKeyCondition {
  """
  Checks for equality with the object’s `cid` field.
  """
  cid: String

  """
  Checks for equality with the object’s `fingerprint` field.
  """
  fingerprint: String

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `isPrimary` field.
  """
  isPrimary: Boolean

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A filter to be used against `CryptoKey` object types. All fields are combined with a logical ‘and.’
"""
input CryptoKeyFilter {
  """
  Checks for all expressions in this list.
  """
  and: [CryptoKeyFilter!]

  """
  Filter by the object’s `cid` field.
  """
  cid: StringFilter

  """
  Filter by the object’s `fingerprint` field.
  """
  fingerprint: StringFilter

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `isPrimary` field.
  """
  isPrimary: BooleanFilter

  """
  Negates the expression.
  """
  not: CryptoKeyFilter

  """
  Checks for any expressions in this list.
  """
  or: [CryptoKeyFilter!]

  """
  Filter by the object’s `userId` field.
  """
  userId: IntFilter
}

"""
Represents an update to a `CryptoKey`. Fields that are set will be updated.
"""
input CryptoKeyPatch {
  algorithm: String

  """
  content address identifier @anagolay/op-an-cid
  """
  cid: String
  createdAt: Datetime
  creationTime: Datetime
  curve: String
  expirationTime: Datetime

  """
  unique key indentifier. more info -> https://tools.ietf.org/html/rfc4880#section-12.2
  hex encoding
  """
  fingerprint: String

  """
  options are p3skb, pgp
  """
  implementation: String

  """
  primary key to be used for the operations
  """
  isPrimary: Boolean

  """
  A Key ID is an eight-octet scalar that identifies a key. more info -> https://tools.ietf.org/html/rfc4880#section-3.3
  hex encoded
  """
  keyId: String

  """
  User firendly KEY name. Example: `My main key`
  """
  name: String

  """
  Multibase encoded armored key
  """
  privateKey: String

  """
  Multibase encoded armored key
  """
  publicKey: String

  """
  Slug of the key name.
  """
  slug: String
  updatedAt: Datetime
  userId: Int
}

"""
A connection to a list of `CryptoKey` values.
"""
type CryptoKeysConnection {
  """
  A list of edges which contains the `CryptoKey` and cursor to aid in pagination.
  """
  edges: [CryptoKeysEdge!]!

  """
  A list of `CryptoKey` objects.
  """
  nodes: [CryptoKey!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CryptoKey` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CryptoKey` edge in the connection.
"""
type CryptoKeysEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CryptoKey` at the end of the edge.
  """
  node: CryptoKey!
}

input CryptoKeySimpleInput {
  comment: String
  passphrase: String
}

"""
Methods to use when ordering `CryptoKey`.
"""
enum CryptoKeysOrderBy {
  CID_ASC
  CID_DESC
  FINGERPRINT_ASC
  FINGERPRINT_DESC
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """
  Equal to the specified value.
  """
  equalTo: Datetime

  """
  Greater than the specified value.
  """
  greaterThan: Datetime

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Datetime

  """
  Included in the specified list.
  """
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Less than the specified value.
  """
  lessThan: Datetime

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Datetime

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Datetime

  """
  Not equal to the specified value.
  """
  notEqualTo: Datetime

  """
  Not included in the specified list.
  """
  notIn: [Datetime!]
}

"""
All input for the `deleteAlbumByNodeId` mutation.
"""
input DeleteAlbumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Album` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAlbum` mutation.
"""
input DeleteAlbumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteAlbumMediaByNodeId` mutation.
"""
input DeleteAlbumMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AlbumMedia` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAlbumMedia` mutation.
"""
input DeleteAlbumMediaInput {
  albumId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaId: Int!
}

"""
The output of our delete `AlbumMedia` mutation.
"""
type DeleteAlbumMediaPayload {
  """
  Reads a single `Album` that is related to this `AlbumMedia`.
  """
  album: Album

  """
  The `AlbumMedia` that was deleted by this mutation.
  """
  albumMedia: AlbumMedia

  """
  An edge for our `AlbumMedia`. May be used by Relay 1.
  """
  albumMediaEdge(
    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAlbumMediaNodeId: ID

  """
  Reads a single `Media` that is related to this `AlbumMedia`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The output of our delete `Album` mutation.
"""
type DeleteAlbumPayload {
  """
  The `Album` that was deleted by this mutation.
  """
  album: Album

  """
  An edge for our `Album`. May be used by Relay 1.
  """
  albumEdge(
    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAlbumNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteCopyrightByNodeId` mutation.
"""
input DeleteCopyrightByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Copyright` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCopyright` mutation.
"""
input DeleteCopyrightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Copyright` mutation.
"""
type DeleteCopyrightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Copyright` that was deleted by this mutation.
  """
  copyright: Copyright

  """
  An edge for our `Copyright`. May be used by Relay 1.
  """
  copyrightEdge(
    """
    The method to use when ordering `Copyright`.
    """
    orderBy: [CopyrightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CopyrightsEdge
  deletedCopyrightNodeId: ID

  """
  Reads a single `Media` that is related to this `Copyright`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteDeviceByCid` mutation.
"""
input DeleteDeviceByCidInput {
  """
  Content identifier of the device identifiers. Using `@anagolay/op-an-cid(identifiers)`.
  """
  cid: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
All input for the `deleteDeviceByNodeId` mutation.
"""
input DeleteDeviceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Device` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteDevice` mutation.
"""
input DeleteDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Device` mutation.
"""
type DeleteDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDeviceNodeId: ID

  """
  The `Device` that was deleted by this mutation.
  """
  device: Device

  """
  An edge for our `Device`. May be used by Relay 1.
  """
  deviceEdge(
    """
    The method to use when ordering `Device`.
    """
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteMediaByNodeId` mutation.
"""
input DeleteMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMediaDeviceByMediaIdAndDeviceId` mutation.
"""
input DeleteMediaDeviceByMediaIdAndDeviceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  deviceId: Int!
  mediaId: Int!
}

"""
The output of our delete `MediaDevice` mutation.
"""
type DeleteMediaDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMediaDeviceNodeId: ID

  """
  Reads a single `Device` that is related to this `MediaDevice`.
  """
  device: Device

  """
  Reads a single `Media` that is related to this `MediaDevice`.
  """
  media: Media

  """
  The `MediaDevice` that was deleted by this mutation.
  """
  mediaDevice: MediaDevice

  """
  An edge for our `MediaDevice`. May be used by Relay 1.
  """
  mediaDeviceEdge(
    """
    The method to use when ordering `MediaDevice`.
    """
    orderBy: [MediaDevicesOrderBy!] = [NATURAL]
  ): MediaDevicesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteMedia` mutation.
"""
input DeleteMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Media` mutation.
"""
type DeleteMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMediaNodeId: ID

  """
  Reads a single `Media` that is related to this `Media`.
  """
  masterMedia: Media

  """
  The `Media` that was deleted by this mutation.
  """
  media: Media

  """
  An edge for our `Media`. May be used by Relay 1.
  """
  mediaEdge(
    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteRenditionByCid` mutation.
"""
input DeleteRenditionByCidInput {
  """
  content address identifier @anagolay/op-an-cid npm package
  """
  cid: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
All input for the `deleteRenditionByMediaIdAndIsMaster` mutation.
"""
input DeleteRenditionByMediaIdAndIsMasterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Every Media must hava one master rendition. Usually First one is the master. This one is served by default when viewing in the apps.
  """
  isMaster: Boolean!
  mediaId: Int!
}

"""
All input for the `deleteRenditionByNodeId` mutation.
"""
input DeleteRenditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Rendition` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRendition` mutation.
"""
input DeleteRenditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Rendition` mutation.
"""
type DeleteRenditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRenditionNodeId: ID

  """
  Reads a single `Media` that is related to this `Rendition`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Rendition` that was deleted by this mutation.
  """
  rendition: Rendition

  """
  An edge for our `Rendition`. May be used by Relay 1.
  """
  renditionEdge(
    """
    The method to use when ordering `Rendition`.
    """
    orderBy: [RenditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RenditionsEdge
}

"""
All input for the `deleteUserAuthenticationByNodeId` mutation.
"""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  A unique identifier for the user within the login service.
  """
  identifier: String!

  """
  The login service used, e.g. `google`,`auth0`
  """
  service: String!
}

"""
All input for the `deleteUserAuthentication` mutation.
"""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `UserAuthentication` mutation.
"""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `UserAuthentication` that was deleted by this mutation.
  """
  userAuthentication: UserAuthentication

  """
  An edge for our `UserAuthentication`. May be used by Relay 1.
  """
  userAuthenticationEdge(
    """
    The method to use when ordering `UserAuthentication`.
    """
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""
All input for the `deleteUserByNodeId` mutation.
"""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserByUsername` mutation.
"""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Public-facing username (or 'handle') of the user.
  """
  username: String!
}

"""
All input for the `deleteUserEmailByNodeId` mutation.
"""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserEmailByUserIdAndEmail` mutation.
"""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The users email address, in `a@b.c` format.
  """
  email: String!
  userId: Int!
}

"""
All input for the `deleteUserEmail` mutation.
"""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `UserEmail` mutation.
"""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `UserEmail`.
  """
  user: User

  """
  The `UserEmail` that was deleted by this mutation.
  """
  userEmail: UserEmail

  """
  An edge for our `UserEmail`. May be used by Relay 1.
  """
  userEmailEdge(
    """
    The method to use when ordering `UserEmail`.
    """
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
All input for the `deleteUser` mutation.
"""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `User` mutation.
"""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `User` that was deleted by this mutation.
  """
  user: User

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
The photo gear, camera, lenses, phones....
"""
type Device implements Node {
  """
  Content identifier of the device identifiers. Using `@anagolay/op-an-cid(identifiers)`.
  """
  cid: String!
  createdAt: Datetime!

  """
  Choose one of the custom device types.
  """
  deviceType: Devicetype!
  id: Int!

  """
  Unique  identifiers for the device. In case of the lens, it is the `[xmp.LensID,xmp.LensSerialNumber]`.
  """
  identifiers: JSON

  """
  Who made the device. Example `Canon`.
  """
  maker: String

  """
  Reads and enables pagination through a set of `MediaDevice`.
  """
  mediaDevices(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaDeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaDeviceFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `MediaDevice`.
    """
    orderBy: [MediaDevicesOrderBy!] = [NATURAL]
  ): MediaDevicesConnection!

  """
  Reads and enables pagination through a set of `Media`.
  """
  mediaList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeviceMediaListManyToManyConnection!

  """
  What is the model of the device. Example `Canon EOS 700D`.
  """
  model: String

  """
  Custom device name. Default is `My device.model`.
  """
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Information on the ownership from the Anagolay Network.
  """
  ownership: [SnProof]

  """
  When the PoCLO has been executed and ownership created.
  """
  ownershipCreatedAt: Datetime!

  """
  Anagolay Network PoCLO rule is executed and ownership is verified.
  """
  ownershipVerified: Boolean!

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Device` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DeviceCondition {
  """
  Checks for equality with the object’s `cid` field.
  """
  cid: String

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `poeId` field.
  """
  poeId: String
}

"""
A filter to be used against `Device` object types. All fields are combined with a logical ‘and.’
"""
input DeviceFilter {
  """
  Checks for all expressions in this list.
  """
  and: [DeviceFilter!]

  """
  Filter by the object’s `cid` field.
  """
  cid: StringFilter

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Negates the expression.
  """
  not: DeviceFilter

  """
  Checks for any expressions in this list.
  """
  or: [DeviceFilter!]

  """
  Filter by the object’s `poeId` field.
  """
  poeId: StringFilter
}

"""
An input for mutations affecting `Device`
"""
input DeviceInput {
  """
  Content identifier of the device identifiers. Using `@anagolay/op-an-cid(identifiers)`.
  """
  cid: String!

  """
  Choose one of the custom device types.
  """
  deviceType: Devicetype!

  """
  Unique  identifiers for the device. In case of the lens, it is the `[xmp.LensID,xmp.LensSerialNumber]`.
  """
  identifiers: JSON

  """
  Who made the device. Example `Canon`.
  """
  maker: String

  """
  What is the model of the device. Example `Canon EOS 700D`.
  """
  model: String

  """
  Custom device name. Default is `My device.model`.
  """
  name: String

  """
  Information on the ownership from the Anagolay Network.
  """
  ownership: [SnProofInput]

  """
  Anagolay Network PoCLO rule is executed and ownership is verified.
  """
  ownershipVerified: Boolean

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String
}

"""
A connection to a list of `Media` values, with data from `MediaDevice`.
"""
type DeviceMediaListManyToManyConnection {
  """
  A list of edges which contains the `Media`, info from the `MediaDevice`, and the cursor to aid in pagination.
  """
  edges: [DeviceMediaListManyToManyEdge!]!

  """
  A list of `Media` objects.
  """
  nodes: [Media!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Media` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Media` edge in the connection, with data from `MediaDevice`.
"""
type DeviceMediaListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Media` at the end of the edge.
  """
  node: Media!
}

"""
Represents an update to a `Device`. Fields that are set will be updated.
"""
input DevicePatch {
  """
  Content identifier of the device identifiers. Using `@anagolay/op-an-cid(identifiers)`.
  """
  cid: String

  """
  Choose one of the custom device types.
  """
  deviceType: Devicetype

  """
  Unique  identifiers for the device. In case of the lens, it is the `[xmp.LensID,xmp.LensSerialNumber]`.
  """
  identifiers: JSON

  """
  Who made the device. Example `Canon`.
  """
  maker: String

  """
  What is the model of the device. Example `Canon EOS 700D`.
  """
  model: String

  """
  Custom device name. Default is `My device.model`.
  """
  name: String

  """
  Information on the ownership from the Anagolay Network.
  """
  ownership: [SnProofInput]

  """
  When the PoCLO has been executed and ownership created.
  """
  ownershipCreatedAt: Datetime

  """
  Anagolay Network PoCLO rule is executed and ownership is verified.
  """
  ownershipVerified: Boolean

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String
}

"""
A connection to a list of `Device` values.
"""
type DevicesConnection {
  """
  A list of edges which contains the `Device` and cursor to aid in pagination.
  """
  edges: [DevicesEdge!]!

  """
  A list of `Device` objects.
  """
  nodes: [Device!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Device` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Device` edge in the connection.
"""
type DevicesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Device` at the end of the edge.
  """
  node: Device!
}

"""
Methods to use when ordering `Device`.
"""
enum DevicesOrderBy {
  CID_ASC
  CID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  POE_ID_ASC
  POE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Physical device that is used to the ownership statement creation.
"""
enum Devicetype {
  CAMERA
  LAPTOP
  LENS
  SMARTPHONE
}

input GpsInputPayload {
  latitude: Float!
  longitude: Float!
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """
  Equal to the specified value.
  """
  equalTo: Int

  """
  Greater than the specified value.
  """
  greaterThan: Int

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Int

  """
  Included in the specified list.
  """
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Less than the specified value.
  """
  lessThan: Int

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Int

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Int

  """
  Not equal to the specified value.
  """
  notEqualTo: Int

  """
  Not included in the specified list.
  """
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Lightroom Catalog table contains the general info on the synced catalog for the purposes of syncing back to the LR.
"""
type LightroomCatalog implements Node {
  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  collectionList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCatalogCollectionListManyToManyConnection!

  """
  Information on the collections with their internal IDs
  """
  collections: JSON!

  """
  Information on the collection sets with their internal IDs
  """
  collectionSets: JSON!

  """
  When the record is created
  """
  createdAt: Datetime!
  id: Int!

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  lightroomCollectionsByCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionsConnection!

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  lightroomCollectionsByLightroomCollectionCatalogIdAndParentId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCatalogLightroomCollectionsByLightroomCollectionCatalogIdAndParentIdManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomMedia`.
  """
  lightroomMediaByLightroomMediaUniquenessCatalogIdAndLrMedia(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMedia`.
    """
    orderBy: [LightroomMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCatalogLightroomMediaByLightroomMediaUniquenessCatalogIdAndLrMediaManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  Catalog name
  """
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slug: String

  """
  When the record is updated
  """
  updatedAt: Datetime!
}

"""
A connection to a list of `LightroomCollection` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomCatalogCollectionListManyToManyConnection {
  """
  A list of edges which contains the `LightroomCollection`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomCatalogCollectionListManyToManyEdge!]!

  """
  A list of `LightroomCollection` objects.
  """
  nodes: [LightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCollection` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomCatalogCollectionListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCollectionId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomCollection` at the end of the edge.
  """
  node: LightroomCollection!
}

"""
A condition to be used against `LightroomCatalog` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LightroomCatalogCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int
}

"""
A filter to be used against `LightroomCatalog` object types. All fields are combined with a logical ‘and.’
"""
input LightroomCatalogFilter {
  """
  Checks for all expressions in this list.
  """
  and: [LightroomCatalogFilter!]

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Negates the expression.
  """
  not: LightroomCatalogFilter

  """
  Checks for any expressions in this list.
  """
  or: [LightroomCatalogFilter!]
}

"""
A connection to a list of `LightroomCollection` values, with data from `LightroomCollection`.
"""
type LightroomCatalogLightroomCollectionsByLightroomCollectionCatalogIdAndParentIdManyToManyConnection {
  """
  A list of edges which contains the `LightroomCollection`, info from the `LightroomCollection`, and the cursor to aid in pagination.
  """
  edges: [LightroomCatalogLightroomCollectionsByLightroomCollectionCatalogIdAndParentIdManyToManyEdge!]!

  """
  A list of `LightroomCollection` objects.
  """
  nodes: [LightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCollection` edge in the connection, with data from `LightroomCollection`.
"""
type LightroomCatalogLightroomCollectionsByLightroomCollectionCatalogIdAndParentIdManyToManyEdge {
  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  childLightroomCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionsConnection!

  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomCollection` at the end of the edge.
  """
  node: LightroomCollection!
}

"""
A connection to a list of `LightroomMedia` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomCatalogLightroomMediaByLightroomMediaUniquenessCatalogIdAndLrMediaManyToManyConnection {
  """
  A list of edges which contains the `LightroomMedia`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomCatalogLightroomMediaByLightroomMediaUniquenessCatalogIdAndLrMediaManyToManyEdge!]!

  """
  A list of `LightroomMedia` objects.
  """
  nodes: [LightroomMedia!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomMedia` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomMedia` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomCatalogLightroomMediaByLightroomMediaUniquenessCatalogIdAndLrMediaManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByLrMedia(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomMedia` at the end of the edge.
  """
  node: LightroomMedia!
}

"""
A connection to a list of `LightroomCatalog` values.
"""
type LightroomCatalogsConnection {
  """
  A list of edges which contains the `LightroomCatalog` and cursor to aid in pagination.
  """
  edges: [LightroomCatalogsEdge!]!

  """
  A list of `LightroomCatalog` objects.
  """
  nodes: [LightroomCatalog!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCatalog` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCatalog` edge in the connection.
"""
type LightroomCatalogsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomCatalog` at the end of the edge.
  """
  node: LightroomCatalog!
}

"""
Methods to use when ordering `LightroomCatalog`.
"""
enum LightroomCatalogsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Lightroom Collection or Collection Set. This will be connected to an Album and the Lightroom Catalog.
"""
type LightroomCollection implements Node {
  """
  Reads and enables pagination through a set of `_AlbumLightroomCollection`.
  """
  _albumLightroomCollectionsByCollectionId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _AlbumLightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _AlbumLightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `_AlbumLightroomCollection`.
    """
    orderBy: [_AlbumLightroomCollectionsOrderBy!] = [NATURAL]
  ): _AlbumLightroomCollectionsConnection!

  """
  Reads and enables pagination through a set of `Album`.
  """
  albumList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionAlbumListManyToManyConnection!

  """
  Reads a single `LightroomCatalog` that is related to this `LightroomCollection`.
  """
  catalog: LightroomCatalog

  """
  Lightroom Catalog connection.
  """
  catalogId: Int!

  """
  Reads and enables pagination through a set of `LightroomCatalog`.
  """
  catalogList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCatalogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCatalogFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCatalog`.
    """
    orderBy: [LightroomCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionCatalogListManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  childLightroomCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionsConnection!
  createdAt: Datetime!
  id: Int!

  """
  Indicates is the collection a `smart collection`. Smart collections have search description to filter out the photos.
  """
  isSmart: Boolean!

  """
  Reads and enables pagination through a set of `LightroomCatalog`.
  """
  lightroomCatalogsByLightroomCollectionParentIdAndCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCatalogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCatalogFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCatalog`.
    """
    orderBy: [LightroomCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionLightroomCatalogsByLightroomCollectionParentIdAndCatalogIdManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomMedia`.
  """
  lightroomMediaByLightroomMediaUniquenessCollectionIdAndLrMedia(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMedia`.
    """
    orderBy: [LightroomMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionLightroomMediaByLightroomMediaUniquenessCollectionIdAndLrMediaManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCollectionId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The local identifier of the published collection, unique within the Lighroom catalog.
  """
  localIdentifier: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `LightroomCollection` that is related to this `LightroomCollection`.
  """
  parentCollection: LightroomCollection

  """
  If the collection is in the collection set then this will be the parent collection.
  """
  parentId: Int

  """
  Lightroom specific search description in case this is smart collection.
  """
  searchDescription: JSON!

  """
  Autogenerated title slug.
  """
  slug: String

  """
  Collection title.
  """
  title: String
  updatedAt: Datetime!
}

"""
A connection to a list of `Album` values, with data from `_AlbumLightroomCollection`.
"""
type LightroomCollectionAlbumListManyToManyConnection {
  """
  A list of edges which contains the `Album`, info from the `_AlbumLightroomCollection`, and the cursor to aid in pagination.
  """
  edges: [LightroomCollectionAlbumListManyToManyEdge!]!

  """
  A list of `Album` objects.
  """
  nodes: [Album!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Album` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Album` edge in the connection, with data from `_AlbumLightroomCollection`.
"""
type LightroomCollectionAlbumListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Album` at the end of the edge.
  """
  node: Album!
}

"""
A connection to a list of `LightroomCatalog` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomCollectionCatalogListManyToManyConnection {
  """
  A list of edges which contains the `LightroomCatalog`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomCollectionCatalogListManyToManyEdge!]!

  """
  A list of `LightroomCatalog` objects.
  """
  nodes: [LightroomCatalog!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCatalog` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCatalog` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomCollectionCatalogListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomCatalog` at the end of the edge.
  """
  node: LightroomCatalog!
}

"""
A condition to be used against `LightroomCollection` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input LightroomCollectionCondition {
  """
  Checks for equality with the object’s `catalogId` field.
  """
  catalogId: Int

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `parentId` field.
  """
  parentId: Int
}

"""
A filter to be used against `LightroomCollection` object types. All fields are combined with a logical ‘and.’
"""
input LightroomCollectionFilter {
  """
  Checks for all expressions in this list.
  """
  and: [LightroomCollectionFilter!]

  """
  Filter by the object’s `catalogId` field.
  """
  catalogId: IntFilter

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Negates the expression.
  """
  not: LightroomCollectionFilter

  """
  Checks for any expressions in this list.
  """
  or: [LightroomCollectionFilter!]

  """
  Filter by the object’s `parentId` field.
  """
  parentId: IntFilter
}

"""
A connection to a list of `LightroomCatalog` values, with data from `LightroomCollection`.
"""
type LightroomCollectionLightroomCatalogsByLightroomCollectionParentIdAndCatalogIdManyToManyConnection {
  """
  A list of edges which contains the `LightroomCatalog`, info from the `LightroomCollection`, and the cursor to aid in pagination.
  """
  edges: [LightroomCollectionLightroomCatalogsByLightroomCollectionParentIdAndCatalogIdManyToManyEdge!]!

  """
  A list of `LightroomCatalog` objects.
  """
  nodes: [LightroomCatalog!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCatalog` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCatalog` edge in the connection, with data from `LightroomCollection`.
"""
type LightroomCollectionLightroomCatalogsByLightroomCollectionParentIdAndCatalogIdManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  lightroomCollectionsByCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionsConnection!

  """
  The `LightroomCatalog` at the end of the edge.
  """
  node: LightroomCatalog!
}

"""
A connection to a list of `LightroomMedia` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomCollectionLightroomMediaByLightroomMediaUniquenessCollectionIdAndLrMediaManyToManyConnection {
  """
  A list of edges which contains the `LightroomMedia`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomCollectionLightroomMediaByLightroomMediaUniquenessCollectionIdAndLrMediaManyToManyEdge!]!

  """
  A list of `LightroomMedia` objects.
  """
  nodes: [LightroomMedia!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomMedia` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomMedia` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomCollectionLightroomMediaByLightroomMediaUniquenessCollectionIdAndLrMediaManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByLrMedia(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomMedia` at the end of the edge.
  """
  node: LightroomMedia!
}

"""
A connection to a list of `LightroomCollection` values.
"""
type LightroomCollectionsConnection {
  """
  A list of edges which contains the `LightroomCollection` and cursor to aid in pagination.
  """
  edges: [LightroomCollectionsEdge!]!

  """
  A list of `LightroomCollection` objects.
  """
  nodes: [LightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCollection` edge in the connection.
"""
type LightroomCollectionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomCollection` at the end of the edge.
  """
  node: LightroomCollection!
}

"""
Methods to use when ordering `LightroomCollection`.
"""
enum LightroomCollectionsOrderBy {
  CATALOG_ID_ASC
  CATALOG_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

input LightroomMasterMediaInputPayload {
  localIdentifier: Int!
  lrUuidIdentifier: String!
}

"""
Lightroom media, direct access to this is allowed only through the plugin. This is kept in sync with the Media record.
"""
type LightroomMedia implements Node {
  """
  Reads and enables pagination through a set of `LightroomCatalog`.
  """
  catalogList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCatalogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCatalogFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCatalog`.
    """
    orderBy: [LightroomCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomMediaCatalogListManyToManyConnection!

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  collectionList(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomMediaCollectionListManyToManyConnection!
  createdAt: Datetime!
  id: Int!

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByLrMedia(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  Reads a single `Media` that is related to this `LightroomMedia`.
  """
  media: Media

  """
  1-1 relation Media - Ligtroom Media
  """
  mediaId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """
  UUID v4 identifier given by the Lighroom Catalog. The docs does not say is this unique withing the catalog or it is a random uuidv4 value. @TODO if it breaks fix it
  """
  uuidIdentifier: UUID!
}

"""
A connection to a list of `LightroomCatalog` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomMediaCatalogListManyToManyConnection {
  """
  A list of edges which contains the `LightroomCatalog`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomMediaCatalogListManyToManyEdge!]!

  """
  A list of `LightroomCatalog` objects.
  """
  nodes: [LightroomCatalog!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCatalog` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCatalog` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomMediaCatalogListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCatalogId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomCatalog` at the end of the edge.
  """
  node: LightroomCatalog!
}

"""
A connection to a list of `LightroomCollection` values, with data from `LightroomMediaUniqueness`.
"""
type LightroomMediaCollectionListManyToManyConnection {
  """
  A list of edges which contains the `LightroomCollection`, info from the `LightroomMediaUniqueness`, and the cursor to aid in pagination.
  """
  edges: [LightroomMediaCollectionListManyToManyEdge!]!

  """
  A list of `LightroomCollection` objects.
  """
  nodes: [LightroomCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomCollection` edge in the connection, with data from `LightroomMediaUniqueness`.
"""
type LightroomMediaCollectionListManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenessesByCollectionId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection!

  """
  The `LightroomCollection` at the end of the edge.
  """
  node: LightroomCollection!
}

"""
A condition to be used against `LightroomMedia` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LightroomMediaCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `mediaId` field.
  """
  mediaId: Int

  """
  Checks for equality with the object’s `uuidIdentifier` field.
  """
  uuidIdentifier: UUID
}

"""
A connection to a list of `LightroomMedia` values.
"""
type LightroomMediaConnection {
  """
  A list of edges which contains the `LightroomMedia` and cursor to aid in pagination.
  """
  edges: [LightroomMediaEdge!]!

  """
  A list of `LightroomMedia` objects.
  """
  nodes: [LightroomMedia!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomMedia` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomMedia` edge in the connection.
"""
type LightroomMediaEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomMedia` at the end of the edge.
  """
  node: LightroomMedia!
}

"""
A filter to be used against `LightroomMedia` object types. All fields are combined with a logical ‘and.’
"""
input LightroomMediaFilter {
  """
  Checks for all expressions in this list.
  """
  and: [LightroomMediaFilter!]

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `mediaId` field.
  """
  mediaId: IntFilter

  """
  Negates the expression.
  """
  not: LightroomMediaFilter

  """
  Checks for any expressions in this list.
  """
  or: [LightroomMediaFilter!]

  """
  Filter by the object’s `uuidIdentifier` field.
  """
  uuidIdentifier: UUIDFilter
}

"""
Methods to use when ordering `LightroomMedia`.
"""
enum LightroomMediaOrderBy {
  ID_ASC
  ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UUID_IDENTIFIER_ASC
  UUID_IDENTIFIER_DESC
}

"""
Mapping table for the album and Lightroom Collection. This allows us to disconnect the Album and make connections to other service providers.
"""
type LightroomMediaUniqueness {
  """
  Reads a single `LightroomCatalog` that is related to this `LightroomMediaUniqueness`.
  """
  catalog: LightroomCatalog

  """
  Connection to the Lightroom Catalog
  """
  catalogId: Int!

  """
  Reads a single `LightroomCollection` that is related to this `LightroomMediaUniqueness`.
  """
  collection: LightroomCollection

  """
  Lightroom Collection in which the media is present.
  """
  collectionId: Int

  """
  Reads a single `LightroomMedia` that is related to this `LightroomMediaUniqueness`.
  """
  lightroomMediaByLrMedia: LightroomMedia

  """
  A unique number identifier within the Lightroom Catalog. If this media is present in the other catalog it will have different local_identifier
  """
  localIdentifier: Int!

  """
  Connection to the Lightroom Media
  """
  lrMedia: Int!
}

"""
A condition to be used against `LightroomMediaUniqueness` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input LightroomMediaUniquenessCondition {
  """
  Checks for equality with the object’s `catalogId` field.
  """
  catalogId: Int

  """
  Checks for equality with the object’s `collectionId` field.
  """
  collectionId: Int

  """
  Checks for equality with the object’s `localIdentifier` field.
  """
  localIdentifier: Int

  """
  Checks for equality with the object’s `lrMedia` field.
  """
  lrMedia: Int
}

"""
A connection to a list of `LightroomMediaUniqueness` values.
"""
type LightroomMediaUniquenessesConnection {
  """
  A list of edges which contains the `LightroomMediaUniqueness` and cursor to aid in pagination.
  """
  edges: [LightroomMediaUniquenessesEdge!]!

  """
  A list of `LightroomMediaUniqueness` objects.
  """
  nodes: [LightroomMediaUniqueness!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `LightroomMediaUniqueness` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LightroomMediaUniqueness` edge in the connection.
"""
type LightroomMediaUniquenessesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `LightroomMediaUniqueness` at the end of the edge.
  """
  node: LightroomMediaUniqueness!
}

"""
Methods to use when ordering `LightroomMediaUniqueness`.
"""
enum LightroomMediaUniquenessesOrderBy {
  CATALOG_ID_ASC
  CATALOG_ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  LOCAL_IDENTIFIER_ASC
  LOCAL_IDENTIFIER_DESC
  LR_MEDIA_ASC
  LR_MEDIA_DESC
  NATURAL
}

"""
A filter to be used against `LightroomMediaUniqueness` object types. All fields are combined with a logical ‘and.’
"""
input LightroomMediaUniquenessFilter {
  """
  Checks for all expressions in this list.
  """
  and: [LightroomMediaUniquenessFilter!]

  """
  Filter by the object’s `catalogId` field.
  """
  catalogId: IntFilter

  """
  Filter by the object’s `collectionId` field.
  """
  collectionId: IntFilter

  """
  Filter by the object’s `localIdentifier` field.
  """
  localIdentifier: IntFilter

  """
  Filter by the object’s `lrMedia` field.
  """
  lrMedia: IntFilter

  """
  Negates the expression.
  """
  not: LightroomMediaUniquenessFilter

  """
  Checks for any expressions in this list.
  """
  or: [LightroomMediaUniquenessFilter!]
}

input LightroomRemoveMediaFromCollectionInputPayload {
  lrCollectionId: Int!
  mediaId: Int!
}

type LightroomRemoveMediaFromCollectionResponse {
  deleted: Boolean
}

input LightroomSyncCatalogInputPayload {
  collections: JSON!
  collectionSets: JSON!
  id: Int
  name: String
  tags: [String]
}

type LightroomSyncCatalogResponse {
  catalog: LightroomCatalog
}

input LightroomSyncCollectionInputPayload {
  catalogId: Int!
  id: Int
  isSmart: Boolean
  localIdentifier: Int!
  parentId: Int
  searchDescription: JSON
  title: String!
}

type LightroomSyncCollectionResponse {
  collection: LightroomCollection
}

input LightroomSyncMediaInputPayload {
  caption: String
  catalogId: Int!
  currentCollectionId: Int!
  gps: GpsInputPayload
  headline: String
  isVirtualCopy: Boolean
  localIdentifier: Int!
  lrUuidIdentifier: String!
  masterMedia: LightroomMasterMediaInputPayload
  mediaId: Int
  title: String
}

type LightroomSyncMediaResponse {
  media: LightroomMedia
}

type LightroomSyncRenditionResponse {
  rendition: Rendition
}

"""
All media, photos, videos and other
"""
type Media implements Node {
  """
  Reads and enables pagination through a set of `AlbumMedia`.
  """
  albumMedias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaConnection!

  """
  Reads and enables pagination through a set of `Album`.
  """
  albums(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAlbumsManyToManyConnection!
  aperture: String

  """
  A textual description, including captions, of the image. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#description
  """
  caption: String

  """
  Reads and enables pagination through a set of `Copyright`.
  """
  copyrights(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CopyrightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CopyrightFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Copyright`.
    """
    orderBy: [CopyrightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CopyrightsConnection!
  createdAt: Datetime!

  """
  Self Soverign Identity or URI. In case of the URI it needs to be properly formatted according to https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1
  """
  creator: String

  """
  this maps to exif:dateTimeOriginal and xmp:DateCreated
  """
  dateCreated: Datetime
  dateDigitalized: Datetime

  """
  Reads and enables pagination through a set of `Device`.
  """
  devices(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeviceFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Device`.
    """
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaDevicesManyToManyConnection!
  didFlashFired: Boolean

  """
  video duration in seconds
  """
  durationInSeconds: Int
  exposureBias: String
  exposureProgram: String

  """
  `Exif.Image.ExposureTime` Exposure time, given in seconds. [Tags](https://www.exiv2.org/tags.html)
  """
  exposureTime: String
  focalLength: String
  gps: JSON

  """
  A brief synopsis of the caption. Headline is not the same as Title. Enter a brief publishable synopsis or summary of the contents of the image
  """
  headline: String
  id: Int!
  isoSpeedRating: Float
  isPrivate: Boolean
  isVideo: Boolean
  isVirtualCopy: Boolean

  """
  Editable Media keywords.
  """
  keywords: JSON!

  """
  Reads and enables pagination through a set of `LightroomMedia`.
  """
  lightroomMedias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMedia`.
    """
    orderBy: [LightroomMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomMediaConnection!

  """
  Reads a single `Media` that is related to this `Media`.
  """
  masterMedia: Media

  """
  If the photo is a virtual copy then this is the master photo relation.
  """
  masterMediaId: Int

  """
  Reads and enables pagination through a set of `Media`.
  """
  mediaByMasterMediaId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection!

  """
  Reads and enables pagination through a set of `MediaDevice`.
  """
  mediaDevices(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaDeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaDeviceFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `MediaDevice`.
    """
    orderBy: [MediaDevicesOrderBy!] = [NATURAL]
  ): MediaDevicesConnection!
  meteringMode: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  perceptual hash @anagolay/op-an-perceptual-hash  npm package
  """
  phash: String

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String

  """
  Reads and enables pagination through a set of `Rendition`.
  """
  renditions(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RenditionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RenditionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Rendition`.
    """
    orderBy: [RenditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RenditionsConnection!
  shutterSpeed: String

  """
  slug of the title
  """
  slug: String

  """
  A shorthand reference for the digital image. Title provides a short human readable name which can be a text and/or numeric reference. It is not the same as Headline. Enter a short verbal and human readable name for the image, this may be the file name. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#title
  """
  title: String
  updatedAt: Datetime!
}

"""
A connection to a list of `Album` values, with data from `AlbumMedia`.
"""
type MediaAlbumsManyToManyConnection {
  """
  A list of edges which contains the `Album`, info from the `AlbumMedia`, and the cursor to aid in pagination.
  """
  edges: [MediaAlbumsManyToManyEdge!]!

  """
  A list of `Album` objects.
  """
  nodes: [Album!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Album` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Album` edge in the connection, with data from `AlbumMedia`.
"""
type MediaAlbumsManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Album` at the end of the edge.
  """
  node: Album!
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """
  Checks for equality with the object’s `dateCreated` field.
  """
  dateCreated: Datetime

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `isVideo` field.
  """
  isVideo: Boolean

  """
  Checks for equality with the object’s `masterMediaId` field.
  """
  masterMediaId: Int

  """
  Checks for equality with the object’s `phash` field.
  """
  phash: String

  """
  Checks for equality with the object’s `poeId` field.
  """
  poeId: String
}

"""
A connection to a list of `Media` values.
"""
type MediaConnection {
  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """
  A list of `Media` objects.
  """
  nodes: [Media!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Media` you could get from the connection.
  """
  totalCount: Int!
}

"""
Information needed to store the copyright for a given media via its Proof-of-Existence
"""
input MediaCopyright {
  """
  Proof of existence as specified [HERE](https://sensio.dev/network/protocol/proof.html)
  """
  poeId: String!

  """
  URN based signer address urn:pgp:key-fingerprint
  """
  signer: String!

  """
  IPTC entity for the copyright. check the type or go [here](https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#entity-or-concept-structure) for the declaration
  Identifier is a StatementID decoded from the chain. It's a [CID](https://sensio.dev/
  Name for this statement, this is autogenerated field and it can be anythingglossary.html#cid)
  """
  statementId: String!
}

"""
Mapping table for a media to the equipment it was taken with.
"""
type MediaDevice {
  """
  Reads a single `Device` that is related to this `MediaDevice`.
  """
  device: Device
  deviceId: Int!

  """
  Reads a single `Media` that is related to this `MediaDevice`.
  """
  media: Media
  mediaId: Int!
}

"""
A condition to be used against `MediaDevice` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MediaDeviceCondition {
  """
  Checks for equality with the object’s `deviceId` field.
  """
  deviceId: Int

  """
  Checks for equality with the object’s `mediaId` field.
  """
  mediaId: Int
}

"""
A filter to be used against `MediaDevice` object types. All fields are combined with a logical ‘and.’
"""
input MediaDeviceFilter {
  """
  Checks for all expressions in this list.
  """
  and: [MediaDeviceFilter!]

  """
  Filter by the object’s `deviceId` field.
  """
  deviceId: IntFilter

  """
  Filter by the object’s `mediaId` field.
  """
  mediaId: IntFilter

  """
  Negates the expression.
  """
  not: MediaDeviceFilter

  """
  Checks for any expressions in this list.
  """
  or: [MediaDeviceFilter!]
}

"""
Represents an update to a `MediaDevice`. Fields that are set will be updated.
"""
input MediaDevicePatch {
  deviceId: Int
  mediaId: Int
}

"""
A connection to a list of `MediaDevice` values.
"""
type MediaDevicesConnection {
  """
  A list of edges which contains the `MediaDevice` and cursor to aid in pagination.
  """
  edges: [MediaDevicesEdge!]!

  """
  A list of `MediaDevice` objects.
  """
  nodes: [MediaDevice!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `MediaDevice` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `MediaDevice` edge in the connection.
"""
type MediaDevicesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `MediaDevice` at the end of the edge.
  """
  node: MediaDevice!
}

"""
A connection to a list of `Device` values, with data from `MediaDevice`.
"""
type MediaDevicesManyToManyConnection {
  """
  A list of edges which contains the `Device`, info from the `MediaDevice`, and the cursor to aid in pagination.
  """
  edges: [MediaDevicesManyToManyEdge!]!

  """
  A list of `Device` objects.
  """
  nodes: [Device!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Device` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Device` edge in the connection, with data from `MediaDevice`.
"""
type MediaDevicesManyToManyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Device` at the end of the edge.
  """
  node: Device!
}

"""
Methods to use when ordering `MediaDevice`.
"""
enum MediaDevicesOrderBy {
  DEVICE_ID_ASC
  DEVICE_ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
}

"""
A `Media` edge in the connection.
"""
type MediaEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Media` at the end of the edge.
  """
  node: Media!
}

"""
A filter to be used against `Media` object types. All fields are combined with a logical ‘and.’
"""
input MediaFilter {
  """
  Checks for all expressions in this list.
  """
  and: [MediaFilter!]

  """
  Filter by the object’s `dateCreated` field.
  """
  dateCreated: DatetimeFilter

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `isVideo` field.
  """
  isVideo: BooleanFilter

  """
  Filter by the object’s `masterMediaId` field.
  """
  masterMediaId: IntFilter

  """
  Negates the expression.
  """
  not: MediaFilter

  """
  Checks for any expressions in this list.
  """
  or: [MediaFilter!]

  """
  Filter by the object’s `phash` field.
  """
  phash: StringFilter

  """
  Filter by the object’s `poeId` field.
  """
  poeId: StringFilter
}

"""
An input for mutations affecting `Media`
"""
input MediaInput {
  aperture: String

  """
  A textual description, including captions, of the image. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#description
  """
  caption: String
  createdAt: Datetime

  """
  Self Soverign Identity or URI. In case of the URI it needs to be properly formatted according to https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1
  """
  creator: String

  """
  this maps to exif:dateTimeOriginal and xmp:DateCreated
  """
  dateCreated: Datetime
  dateDigitalized: Datetime
  didFlashFired: Boolean

  """
  video duration in seconds
  """
  durationInSeconds: Int
  exposureBias: String
  exposureProgram: String

  """
  `Exif.Image.ExposureTime` Exposure time, given in seconds. [Tags](https://www.exiv2.org/tags.html)
  """
  exposureTime: String
  focalLength: String
  gps: JSON

  """
  A brief synopsis of the caption. Headline is not the same as Title. Enter a brief publishable synopsis or summary of the contents of the image
  """
  headline: String
  isoSpeedRating: Float
  isPrivate: Boolean
  isVideo: Boolean
  isVirtualCopy: Boolean

  """
  Editable Media keywords.
  """
  keywords: JSON

  """
  If the photo is a virtual copy then this is the master photo relation.
  """
  masterMediaId: Int
  meteringMode: String

  """
  perceptual hash @anagolay/op-an-perceptual-hash  npm package
  """
  phash: String

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String
  shutterSpeed: String

  """
  slug of the title
  """
  slug: String

  """
  A shorthand reference for the digital image. Title provides a short human readable name which can be a text and/or numeric reference. It is not the same as Headline. Enter a short verbal and human readable name for the image, this may be the file name. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#title
  """
  title: String
  updatedAt: Datetime
}

"""
Methods to use when ordering `Media`.
"""
enum MediaOrderBy {
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  ID_ASC
  ID_DESC
  IS_VIDEO_ASC
  IS_VIDEO_DESC
  MASTER_MEDIA_ID_ASC
  MASTER_MEDIA_ID_DESC
  NATURAL
  PHASH_ASC
  PHASH_DESC
  POE_ID_ASC
  POE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Media`. Fields that are set will be updated.
"""
input MediaPatch {
  aperture: String

  """
  A textual description, including captions, of the image. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#description
  """
  caption: String
  createdAt: Datetime

  """
  Self Soverign Identity or URI. In case of the URI it needs to be properly formatted according to https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1
  """
  creator: String

  """
  this maps to exif:dateTimeOriginal and xmp:DateCreated
  """
  dateCreated: Datetime
  dateDigitalized: Datetime
  didFlashFired: Boolean

  """
  video duration in seconds
  """
  durationInSeconds: Int
  exposureBias: String
  exposureProgram: String

  """
  `Exif.Image.ExposureTime` Exposure time, given in seconds. [Tags](https://www.exiv2.org/tags.html)
  """
  exposureTime: String
  focalLength: String
  gps: JSON

  """
  A brief synopsis of the caption. Headline is not the same as Title. Enter a brief publishable synopsis or summary of the contents of the image
  """
  headline: String
  isoSpeedRating: Float
  isPrivate: Boolean
  isVideo: Boolean
  isVirtualCopy: Boolean

  """
  Editable Media keywords.
  """
  keywords: JSON

  """
  If the photo is a virtual copy then this is the master photo relation.
  """
  masterMediaId: Int
  meteringMode: String

  """
  perceptual hash @anagolay/op-an-perceptual-hash  npm package
  """
  phash: String

  """
  Anagolay Network  Proof of Existence ID
  """
  poeId: String
  shutterSpeed: String

  """
  slug of the title
  """
  slug: String

  """
  A shorthand reference for the digital image. Title provides a short human readable name which can be a text and/or numeric reference. It is not the same as Headline. Enter a short verbal and human readable name for the image, this may be the file name. https://iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#title
  """
  title: String
  updatedAt: Datetime
}

"""
If this is true then all updates are done and saved. Listen for errors in case of the failures.
"""
type MediaPayload {
  """
  How many records we inserted. This will be a nubmer === inserted.length or 0 of there are no inserted records. In that case it means we already have them in the DB
  """
  inserted: Int!

  """
  How many records we passed in.
  """
  passed: Int!

  """
  Did we succeed with mutation. Pretty much everything will succeed unless there are DB errors. It will succeed even if there are multiple values already stored. In that case check next return param
  """
  success: Boolean!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Album`.
  """
  createAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAlbumInput!
  ): CreateAlbumPayload

  """
  Creates a single `AlbumMedia`.
  """
  createAlbumMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAlbumMediaInput!
  ): CreateAlbumMediaPayload

  """
  Creates a single `Copyright`.
  """
  createCopyright(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCopyrightInput!
  ): CreateCopyrightPayload

  """
  Creates a single `Device`.
  """
  createDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeviceInput!
  ): CreateDevicePayload

  """
  Creates a single `Media`.
  """
  createMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaInput!
  ): CreateMediaPayload

  """
  Creates a single `Rendition`.
  """
  createRendition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRenditionInput!
  ): CreateRenditionPayload

  """
  Creates a single `UserEmail`.
  """
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """
  Deletes a single `Album` using a unique key.
  """
  deleteAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlbumInput!
  ): DeleteAlbumPayload

  """
  Deletes a single `Album` using its globally unique id.
  """
  deleteAlbumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlbumByNodeIdInput!
  ): DeleteAlbumPayload

  """
  Deletes a single `AlbumMedia` using a unique key.
  """
  deleteAlbumMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlbumMediaInput!
  ): DeleteAlbumMediaPayload

  """
  Deletes a single `AlbumMedia` using its globally unique id.
  """
  deleteAlbumMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlbumMediaByNodeIdInput!
  ): DeleteAlbumMediaPayload

  """
  Deletes a single `Copyright` using a unique key.
  """
  deleteCopyright(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCopyrightInput!
  ): DeleteCopyrightPayload

  """
  Deletes a single `Copyright` using its globally unique id.
  """
  deleteCopyrightByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCopyrightByNodeIdInput!
  ): DeleteCopyrightPayload

  """
  Deletes a single `Device` using a unique key.
  """
  deleteDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceInput!
  ): DeleteDevicePayload

  """
  Deletes a single `Device` using a unique key.
  """
  deleteDeviceByCid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceByCidInput!
  ): DeleteDevicePayload

  """
  Deletes a single `Device` using its globally unique id.
  """
  deleteDeviceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeviceByNodeIdInput!
  ): DeleteDevicePayload

  """
  Deletes a single `Media` using a unique key.
  """
  deleteMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaInput!
  ): DeleteMediaPayload

  """
  Deletes a single `Media` using its globally unique id.
  """
  deleteMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaByNodeIdInput!
  ): DeleteMediaPayload

  """
  Deletes a single `MediaDevice` using a unique key.
  """
  deleteMediaDeviceByMediaIdAndDeviceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaDeviceByMediaIdAndDeviceIdInput!
  ): DeleteMediaDevicePayload

  """
  Deletes a single `Rendition` using a unique key.
  """
  deleteRendition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRenditionInput!
  ): DeleteRenditionPayload

  """
  Deletes a single `Rendition` using a unique key.
  """
  deleteRenditionByCid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRenditionByCidInput!
  ): DeleteRenditionPayload

  """
  Deletes a single `Rendition` using a unique key.
  """
  deleteRenditionByMediaIdAndIsMaster(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRenditionByMediaIdAndIsMasterInput!
  ): DeleteRenditionPayload

  """
  Deletes a single `Rendition` using its globally unique id.
  """
  deleteRenditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRenditionByNodeIdInput!
  ): DeleteRenditionPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  Deletes a single `UserAuthentication` using a unique key.
  """
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """
  Deletes a single `UserAuthentication` using its globally unique id.
  """
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """
  Deletes a single `UserAuthentication` using a unique key.
  """
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """
  Deletes a single `User` using its globally unique id.
  """
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """
  Deletes a single `UserEmail` using a unique key.
  """
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """
  Deletes a single `UserEmail` using its globally unique id.
  """
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """
  Deletes a single `UserEmail` using a unique key.
  """
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """
  This mutation removes the MEDIA from the Album and the LrMediaUniqueness. If all goes well the return will be TRUE, in any other case there will be an error. The mutation accepts media ID which is the REAL media and the Lightroom collection ID.
  """
  lightroomRemoveMediaFromCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LightroomRemoveMediaFromCollectionInputPayload!
  ): LightroomRemoveMediaFromCollectionResponse
  lightroomSyncCatalog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LightroomSyncCatalogInputPayload!
  ): LightroomSyncCatalogResponse
  lightroomSyncCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LightroomSyncCollectionInputPayload!
  ): LightroomSyncCollectionResponse
  lightroomSyncMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LightroomSyncMediaInputPayload!
  ): LightroomSyncMediaResponse
  lightroomSyncRendition(
    rendition: RenditionInput!
    renditionId: Int
  ): LightroomSyncRenditionResponse
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  Updates a single `Album` using a unique key and a patch.
  """
  updateAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlbumInput!
  ): UpdateAlbumPayload

  """
  Updates a single `Album` using its globally unique id and a patch.
  """
  updateAlbumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlbumByNodeIdInput!
  ): UpdateAlbumPayload

  """
  Updates a single `AlbumMedia` using a unique key and a patch.
  """
  updateAlbumMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlbumMediaInput!
  ): UpdateAlbumMediaPayload

  """
  Updates a single `AlbumMedia` using its globally unique id and a patch.
  """
  updateAlbumMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlbumMediaByNodeIdInput!
  ): UpdateAlbumMediaPayload

  """
  Updates a single `Copyright` using a unique key and a patch.
  """
  updateCopyright(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCopyrightInput!
  ): UpdateCopyrightPayload

  """
  Updates a single `Copyright` using its globally unique id and a patch.
  """
  updateCopyrightByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCopyrightByNodeIdInput!
  ): UpdateCopyrightPayload

  """
  Updates a single `CryptoKey` using a unique key and a patch.
  """
  updateCryptoKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCryptoKeyInput!
  ): UpdateCryptoKeyPayload

  """
  Updates a single `CryptoKey` using a unique key and a patch.
  """
  updateCryptoKeyByCid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCryptoKeyByCidInput!
  ): UpdateCryptoKeyPayload

  """
  Updates a single `CryptoKey` using a unique key and a patch.
  """
  updateCryptoKeyByFingerprint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCryptoKeyByFingerprintInput!
  ): UpdateCryptoKeyPayload

  """
  Updates a single `CryptoKey` using a unique key and a patch.
  """
  updateCryptoKeyByIsPrimaryAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCryptoKeyByIsPrimaryAndUserIdInput!
  ): UpdateCryptoKeyPayload

  """
  Updates a single `CryptoKey` using its globally unique id and a patch.
  """
  updateCryptoKeyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCryptoKeyByNodeIdInput!
  ): UpdateCryptoKeyPayload

  """
  Updates a single `Device` using a unique key and a patch.
  """
  updateDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceInput!
  ): UpdateDevicePayload

  """
  Updates a single `Device` using a unique key and a patch.
  """
  updateDeviceByCid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceByCidInput!
  ): UpdateDevicePayload

  """
  Updates a single `Device` using its globally unique id and a patch.
  """
  updateDeviceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeviceByNodeIdInput!
  ): UpdateDevicePayload

  """
  Updates a single `Media` using a unique key and a patch.
  """
  updateMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaInput!
  ): UpdateMediaPayload

  """
  Updates a single `Media` using its globally unique id and a patch.
  """
  updateMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaByNodeIdInput!
  ): UpdateMediaPayload

  """
  Update the media with the created copyright statements
  """
  updateMediaCopyright(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: [MediaCopyright!]!
  ): MediaPayload

  """
  Updates a single `MediaDevice` using a unique key and a patch.
  """
  updateMediaDeviceByMediaIdAndDeviceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaDeviceByMediaIdAndDeviceIdInput!
  ): UpdateMediaDevicePayload

  """
  Updates a single `Rendition` using a unique key and a patch.
  """
  updateRendition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRenditionInput!
  ): UpdateRenditionPayload

  """
  Updates a single `Rendition` using a unique key and a patch.
  """
  updateRenditionByCid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRenditionByCidInput!
  ): UpdateRenditionPayload

  """
  Updates a single `Rendition` using a unique key and a patch.
  """
  updateRenditionByMediaIdAndIsMaster(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRenditionByMediaIdAndIsMasterInput!
  ): UpdateRenditionPayload

  """
  Updates a single `Rendition` using its globally unique id and a patch.
  """
  updateRenditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRenditionByNodeIdInput!
  ): UpdateRenditionPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using its globally unique id and a patch.
  """
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
}

"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  _albumLightroomCollectionByAlbumIdAndCollectionId(
    albumId: Int!
    collectionId: Int!
  ): _AlbumLightroomCollection

  """
  Reads and enables pagination through a set of `_AlbumLightroomCollection`.
  """
  _albumLightroomCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _AlbumLightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _AlbumLightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `_AlbumLightroomCollection`.
    """
    orderBy: [_AlbumLightroomCollectionsOrderBy!] = [NATURAL]
  ): _AlbumLightroomCollectionsConnection
  album(id: Int!): Album

  """
  Reads a single `Album` using its globally unique `ID`.
  """
  albumByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Album`.
    """
    nodeId: ID!
  ): Album
  albumMedia(albumId: Int!, mediaId: Int!): AlbumMedia

  """
  Reads a single `AlbumMedia` using its globally unique `ID`.
  """
  albumMediaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AlbumMedia`.
    """
    nodeId: ID!
  ): AlbumMedia

  """
  Reads and enables pagination through a set of `AlbumMedia`.
  """
  albumMedias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaConnection

  """
  Reads and enables pagination through a set of `Album`.
  """
  albums(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlbumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AlbumFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumsConnection
  copyright(id: Int!): Copyright

  """
  Reads a single `Copyright` using its globally unique `ID`.
  """
  copyrightByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Copyright`.
    """
    nodeId: ID!
  ): Copyright

  """
  Reads and enables pagination through a set of `Copyright`.
  """
  copyrights(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CopyrightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CopyrightFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Copyright`.
    """
    orderBy: [CopyrightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CopyrightsConnection
  cryptoKey(id: Int!): CryptoKey
  cryptoKeyByCid(cid: String!): CryptoKey
  cryptoKeyByFingerprint(fingerprint: String!): CryptoKey
  cryptoKeyByIsPrimaryAndUserId(isPrimary: Boolean!, userId: Int!): CryptoKey

  """
  Reads a single `CryptoKey` using its globally unique `ID`.
  """
  cryptoKeyByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CryptoKey`.
    """
    nodeId: ID!
  ): CryptoKey

  """
  Reads and enables pagination through a set of `CryptoKey`.
  """
  cryptoKeys(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CryptoKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CryptoKeyFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `CryptoKey`.
    """
    orderBy: [CryptoKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): CryptoKeysConnection

  """
  The currently logged in user (or null if not logged in).
  """
  currentUser: User
  currentUserId: Int
  device(id: Int!): Device
  deviceByCid(cid: String!): Device

  """
  Reads a single `Device` using its globally unique `ID`.
  """
  deviceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Device`.
    """
    nodeId: ID!
  ): Device

  """
  Reads and enables pagination through a set of `Device`.
  """
  devices(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeviceFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Device`.
    """
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesConnection
  lightroomCatalog(id: Int!): LightroomCatalog

  """
  Reads a single `LightroomCatalog` using its globally unique `ID`.
  """
  lightroomCatalogByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LightroomCatalog`.
    """
    nodeId: ID!
  ): LightroomCatalog

  """
  Reads and enables pagination through a set of `LightroomCatalog`.
  """
  lightroomCatalogs(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCatalogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCatalogFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCatalog`.
    """
    orderBy: [LightroomCatalogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCatalogsConnection
  lightroomCollection(id: Int!): LightroomCollection
  lightroomCollectionByCatalogIdAndLocalIdentifier(
    catalogId: Int!
    localIdentifier: Int!
  ): LightroomCollection

  """
  Reads a single `LightroomCollection` using its globally unique `ID`.
  """
  lightroomCollectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LightroomCollection`.
    """
    nodeId: ID!
  ): LightroomCollection

  """
  Reads and enables pagination through a set of `LightroomCollection`.
  """
  lightroomCollections(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomCollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomCollectionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomCollection`.
    """
    orderBy: [LightroomCollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomCollectionsConnection
  lightroomMedia(id: Int!): LightroomMedia

  """
  Reads a single `LightroomMedia` using its globally unique `ID`.
  """
  lightroomMediaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LightroomMedia`.
    """
    nodeId: ID!
  ): LightroomMedia
  lightroomMediaByUuidIdentifier(uuidIdentifier: UUID!): LightroomMedia

  """
  Reads and enables pagination through a set of `LightroomMedia`.
  """
  lightroomMedias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMedia`.
    """
    orderBy: [LightroomMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): LightroomMediaConnection
  lightroomMediaUniquenessByLrMediaAndCatalogIdAndCollectionIdAndLocalIdentifier(
    catalogId: Int!
    collectionId: Int!
    localIdentifier: Int!
    lrMedia: Int!
  ): LightroomMediaUniqueness

  """
  Reads and enables pagination through a set of `LightroomMediaUniqueness`.
  """
  lightroomMediaUniquenesses(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LightroomMediaUniquenessCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LightroomMediaUniquenessFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `LightroomMediaUniqueness`.
    """
    orderBy: [LightroomMediaUniquenessesOrderBy!] = [NATURAL]
  ): LightroomMediaUniquenessesConnection
  me: User!
  media(id: Int!): Media

  """
  Reads a single `Media` using its globally unique `ID`.
  """
  mediaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Media`.
    """
    nodeId: ID!
  ): Media
  mediaDeviceByMediaIdAndDeviceId(deviceId: Int!, mediaId: Int!): MediaDevice

  """
  Reads and enables pagination through a set of `MediaDevice`.
  """
  mediaDevices(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaDeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaDeviceFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `MediaDevice`.
    """
    orderBy: [MediaDevicesOrderBy!] = [NATURAL]
  ): MediaDevicesConnection

  """
  Any media that have device ownership verified will be eligible for the copyright claim.
  """
  mediaReadyForCopyright(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): MediaConnection

  """
  Reads and enables pagination through a set of `Media`.
  """
  medias(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  rendition(id: Int!): Rendition
  renditionByCid(cid: String!): Rendition
  renditionByMediaIdAndIsMaster(isMaster: Boolean!, mediaId: Int!): Rendition

  """
  Reads a single `Rendition` using its globally unique `ID`.
  """
  renditionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Rendition`.
    """
    nodeId: ID!
  ): Rendition

  """
  Reads and enables pagination through a set of `Rendition`.
  """
  renditions(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RenditionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RenditionFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Rendition`.
    """
    orderBy: [RenditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RenditionsConnection
  slugify(value: String!): String
  user(id: Int!): User
  userAuthentication(id: Int!): UserAuthentication

  """
  Reads a single `UserAuthentication` using its globally unique `ID`.
  """
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication
  userAuthenticationByServiceAndIdentifier(
    identifier: String!
    service: String!
  ): UserAuthentication

  """
  Reads a single `User` using its globally unique `ID`.
  """
  userByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `User`.
    """
    nodeId: ID!
  ): User
  userByUsername(username: String!): User
  userEmail(id: Int!): UserEmail

  """
  Reads a single `UserEmail` using its globally unique `ID`.
  """
  userEmailByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserEmail`.
    """
    nodeId: ID!
  ): UserEmail
  userEmailByUserIdAndEmail(email: String!, userId: Int!): UserEmail
}

input RegisterInput {
  authService: AuthServiceInput!
  cryptoKey: CryptoKeySimpleInput
  user: SimpleUserInput!
}

type RegisterPayload {
  user: User!
}

"""
A version of the Media. It can be a master one or published. Unlocked and Locked. *Unlocked* is considered provate and user can always `develop` the photo. *Locked* is considered a public and published photo, no changes are allowed.
"""
type Rendition implements Node {
  """
  Rendition aspect ratio.
  """
  aspectRatio: Float

  """
  content address identifier @anagolay/op-an-cid npm package
  """
  cid: String!
  createdAt: Datetime!

  """
  Develop Settings in JSON format
  """
  developSettings: JSON

  """
  Format of the file. One of 'RAW', 'DNG', 'JPG', 'PSD', 'TIFF', or 'VIDEO'.
  """
  fileFormat: String!

  """
  synced file name
  """
  fileName: String

  """
  File version on the storage if supported. Think of this as a stored revision ID.
  """
  fileVersion: String

  """
  Frames per second, if a video, if not then null.
  """
  fps: Float

  """
  Height of the rendition.
  """
  height: Int!
  id: Int!

  """
  abs path where to find image rendition on related storage
  """
  imageStoragePath: String!

  """
  Every Media must hava one master rendition. Usually First one is the master. This one is served by default when viewing in the apps.
  """
  isMaster: Boolean!

  """
  It is a  smart preview, mainly for LR.
  """
  isSmartPreview: Boolean!

  """
  Reads a single `Media` that is related to this `Rendition`.
  """
  media: Media
  mediaId: Int!

  """
  Rendition metadata
  """
  metadata: JSON

  """
  content address of the image METADATA without any modifications. Using the @anagolay/op-an-image-metadata-hash
  """
  metadataCid: String

  """
  abs path where to find full metadata of the rendition on related storage
  """
  metadataStoragePath: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  content address of the RAW pixels without the metadata. The pixels are as IT IS, no color transformation is included. Using the @anagolay/op-an-image-raw-pixels-hash
  """
  pixelCid: String

  """
  What is the size of the rendition in bytes.
  """
  size: Int
  updatedAt: Datetime!

  """
  Width of the rendition.
  """
  width: Int!
}

"""
A condition to be used against `Rendition` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RenditionCondition {
  """
  Checks for equality with the object’s `cid` field.
  """
  cid: String

  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `isMaster` field.
  """
  isMaster: Boolean

  """
  Checks for equality with the object’s `mediaId` field.
  """
  mediaId: Int
}

"""
A filter to be used against `Rendition` object types. All fields are combined with a logical ‘and.’
"""
input RenditionFilter {
  """
  Checks for all expressions in this list.
  """
  and: [RenditionFilter!]

  """
  Filter by the object’s `cid` field.
  """
  cid: StringFilter

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `isMaster` field.
  """
  isMaster: BooleanFilter

  """
  Filter by the object’s `mediaId` field.
  """
  mediaId: IntFilter

  """
  Negates the expression.
  """
  not: RenditionFilter

  """
  Checks for any expressions in this list.
  """
  or: [RenditionFilter!]
}

"""
An input for mutations affecting `Rendition`
"""
input RenditionInput {
  """
  Rendition aspect ratio.
  """
  aspectRatio: Float

  """
  content address identifier @anagolay/op-an-cid npm package
  """
  cid: String!
  createdAt: Datetime

  """
  Develop Settings in JSON format
  """
  developSettings: JSON

  """
  Format of the file. One of 'RAW', 'DNG', 'JPG', 'PSD', 'TIFF', or 'VIDEO'.
  """
  fileFormat: String

  """
  synced file name
  """
  fileName: String

  """
  File version on the storage if supported. Think of this as a stored revision ID.
  """
  fileVersion: String

  """
  Frames per second, if a video, if not then null.
  """
  fps: Float

  """
  Height of the rendition.
  """
  height: Int!

  """
  abs path where to find image rendition on related storage
  """
  imageStoragePath: String!

  """
  Every Media must hava one master rendition. Usually First one is the master. This one is served by default when viewing in the apps.
  """
  isMaster: Boolean

  """
  It is a  smart preview, mainly for LR.
  """
  isSmartPreview: Boolean
  mediaId: Int!

  """
  Rendition metadata
  """
  metadata: JSON

  """
  content address of the image METADATA without any modifications. Using the @anagolay/op-an-image-metadata-hash
  """
  metadataCid: String

  """
  abs path where to find full metadata of the rendition on related storage
  """
  metadataStoragePath: String

  """
  content address of the RAW pixels without the metadata. The pixels are as IT IS, no color transformation is included. Using the @anagolay/op-an-image-raw-pixels-hash
  """
  pixelCid: String

  """
  What is the size of the rendition in bytes.
  """
  size: Int
  updatedAt: Datetime

  """
  Width of the rendition.
  """
  width: Int!
}

"""
Represents an update to a `Rendition`. Fields that are set will be updated.
"""
input RenditionPatch {
  """
  Rendition aspect ratio.
  """
  aspectRatio: Float

  """
  content address identifier @anagolay/op-an-cid npm package
  """
  cid: String
  createdAt: Datetime

  """
  Develop Settings in JSON format
  """
  developSettings: JSON

  """
  Format of the file. One of 'RAW', 'DNG', 'JPG', 'PSD', 'TIFF', or 'VIDEO'.
  """
  fileFormat: String

  """
  synced file name
  """
  fileName: String

  """
  File version on the storage if supported. Think of this as a stored revision ID.
  """
  fileVersion: String

  """
  Frames per second, if a video, if not then null.
  """
  fps: Float

  """
  Height of the rendition.
  """
  height: Int

  """
  abs path where to find image rendition on related storage
  """
  imageStoragePath: String

  """
  Every Media must hava one master rendition. Usually First one is the master. This one is served by default when viewing in the apps.
  """
  isMaster: Boolean

  """
  It is a  smart preview, mainly for LR.
  """
  isSmartPreview: Boolean
  mediaId: Int

  """
  Rendition metadata
  """
  metadata: JSON

  """
  content address of the image METADATA without any modifications. Using the @anagolay/op-an-image-metadata-hash
  """
  metadataCid: String

  """
  abs path where to find full metadata of the rendition on related storage
  """
  metadataStoragePath: String

  """
  content address of the RAW pixels without the metadata. The pixels are as IT IS, no color transformation is included. Using the @anagolay/op-an-image-raw-pixels-hash
  """
  pixelCid: String

  """
  What is the size of the rendition in bytes.
  """
  size: Int
  updatedAt: Datetime

  """
  Width of the rendition.
  """
  width: Int
}

"""
A connection to a list of `Rendition` values.
"""
type RenditionsConnection {
  """
  A list of edges which contains the `Rendition` and cursor to aid in pagination.
  """
  edges: [RenditionsEdge!]!

  """
  A list of `Rendition` objects.
  """
  nodes: [Rendition!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Rendition` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Rendition` edge in the connection.
"""
type RenditionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Rendition` at the end of the edge.
  """
  node: Rendition!
}

"""
Methods to use when ordering `Rendition`.
"""
enum RenditionsOrderBy {
  CID_ASC
  CID_DESC
  ID_ASC
  ID_DESC
  IS_MASTER_ASC
  IS_MASTER_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

input SimpleUserInput {
  avatarUrl: String
  email: String!
  email_verified: Boolean
  name: String
  username: String
}

"""
Key-Value Object style type
"""
type SnProof {
  id: String
  pallet: String
}

"""
An input for mutations affecting `SnProof`
"""
input SnProofInput {
  id: String
  pallet: String
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Ends with the specified string (case-sensitive).
  """
  endsWith: String

  """
  Ends with the specified string (case-insensitive).
  """
  endsWithInsensitive: String

  """
  Equal to the specified value.
  """
  equalTo: String

  """
  Equal to the specified value (case-insensitive).
  """
  equalToInsensitive: String

  """
  Greater than the specified value.
  """
  greaterThan: String

  """
  Greater than the specified value (case-insensitive).
  """
  greaterThanInsensitive: String

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: String

  """
  Greater than or equal to the specified value (case-insensitive).
  """
  greaterThanOrEqualToInsensitive: String

  """
  Included in the specified list.
  """
  in: [String!]

  """
  Contains the specified string (case-sensitive).
  """
  includes: String

  """
  Contains the specified string (case-insensitive).
  """
  includesInsensitive: String

  """
  Included in the specified list (case-insensitive).
  """
  inInsensitive: [String!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Less than the specified value.
  """
  lessThan: String

  """
  Less than the specified value (case-insensitive).
  """
  lessThanInsensitive: String

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: String

  """
  Less than or equal to the specified value (case-insensitive).
  """
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """
  Does not end with the specified string (case-sensitive).
  """
  notEndsWith: String

  """
  Does not end with the specified string (case-insensitive).
  """
  notEndsWithInsensitive: String

  """
  Not equal to the specified value.
  """
  notEqualTo: String

  """
  Not equal to the specified value (case-insensitive).
  """
  notEqualToInsensitive: String

  """
  Not included in the specified list.
  """
  notIn: [String!]

  """
  Does not contain the specified string (case-sensitive).
  """
  notIncludes: String

  """
  Does not contain the specified string (case-insensitive).
  """
  notIncludesInsensitive: String

  """
  Not included in the specified list (case-insensitive).
  """
  notInInsensitive: [String!]

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """
  Does not start with the specified string (case-sensitive).
  """
  notStartsWith: String

  """
  Does not start with the specified string (case-insensitive).
  """
  notStartsWithInsensitive: String

  """
  Starts with the specified string (case-sensitive).
  """
  startsWith: String

  """
  Starts with the specified string (case-insensitive).
  """
  startsWithInsensitive: String
}

"""
All input for the `updateAlbumByNodeId` mutation.
"""
input UpdateAlbumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Album` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Album` being updated.
  """
  patch: AlbumPatch!
}

"""
All input for the `updateAlbum` mutation.
"""
input UpdateAlbumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Album` being updated.
  """
  patch: AlbumPatch!
}

"""
All input for the `updateAlbumMediaByNodeId` mutation.
"""
input UpdateAlbumMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AlbumMedia` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AlbumMedia` being updated.
  """
  patch: AlbumMediaPatch!
}

"""
All input for the `updateAlbumMedia` mutation.
"""
input UpdateAlbumMediaInput {
  albumId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaId: Int!

  """
  An object where the defined keys will be set on the `AlbumMedia` being updated.
  """
  patch: AlbumMediaPatch!
}

"""
The output of our update `AlbumMedia` mutation.
"""
type UpdateAlbumMediaPayload {
  """
  Reads a single `Album` that is related to this `AlbumMedia`.
  """
  album: Album

  """
  The `AlbumMedia` that was updated by this mutation.
  """
  albumMedia: AlbumMedia

  """
  An edge for our `AlbumMedia`. May be used by Relay 1.
  """
  albumMediaEdge(
    """
    The method to use when ordering `AlbumMedia`.
    """
    orderBy: [AlbumMediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumMediaEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `AlbumMedia`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The output of our update `Album` mutation.
"""
type UpdateAlbumPayload {
  """
  The `Album` that was updated by this mutation.
  """
  album: Album

  """
  An edge for our `Album`. May be used by Relay 1.
  """
  albumEdge(
    """
    The method to use when ordering `Album`.
    """
    orderBy: [AlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AlbumsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateCopyrightByNodeId` mutation.
"""
input UpdateCopyrightByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Copyright` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Copyright` being updated.
  """
  patch: CopyrightPatch!
}

"""
All input for the `updateCopyright` mutation.
"""
input UpdateCopyrightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Copyright` being updated.
  """
  patch: CopyrightPatch!
}

"""
The output of our update `Copyright` mutation.
"""
type UpdateCopyrightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Copyright` that was updated by this mutation.
  """
  copyright: Copyright

  """
  An edge for our `Copyright`. May be used by Relay 1.
  """
  copyrightEdge(
    """
    The method to use when ordering `Copyright`.
    """
    orderBy: [CopyrightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CopyrightsEdge

  """
  Reads a single `Media` that is related to this `Copyright`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateCryptoKeyByCid` mutation.
"""
input UpdateCryptoKeyByCidInput {
  """
  content address identifier @anagolay/op-an-cid
  """
  cid: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CryptoKey` being updated.
  """
  patch: CryptoKeyPatch!
}

"""
All input for the `updateCryptoKeyByFingerprint` mutation.
"""
input UpdateCryptoKeyByFingerprintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  unique key indentifier. more info -> https://tools.ietf.org/html/rfc4880#section-12.2
  hex encoding
  """
  fingerprint: String!

  """
  An object where the defined keys will be set on the `CryptoKey` being updated.
  """
  patch: CryptoKeyPatch!
}

"""
All input for the `updateCryptoKeyByIsPrimaryAndUserId` mutation.
"""
input UpdateCryptoKeyByIsPrimaryAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  primary key to be used for the operations
  """
  isPrimary: Boolean!

  """
  An object where the defined keys will be set on the `CryptoKey` being updated.
  """
  patch: CryptoKeyPatch!
  userId: Int!
}

"""
All input for the `updateCryptoKeyByNodeId` mutation.
"""
input UpdateCryptoKeyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CryptoKey` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CryptoKey` being updated.
  """
  patch: CryptoKeyPatch!
}

"""
All input for the `updateCryptoKey` mutation.
"""
input UpdateCryptoKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `CryptoKey` being updated.
  """
  patch: CryptoKeyPatch!
}

"""
The output of our update `CryptoKey` mutation.
"""
type UpdateCryptoKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CryptoKey` that was updated by this mutation.
  """
  cryptoKey: CryptoKey

  """
  An edge for our `CryptoKey`. May be used by Relay 1.
  """
  cryptoKeyEdge(
    """
    The method to use when ordering `CryptoKey`.
    """
    orderBy: [CryptoKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): CryptoKeysEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `CryptoKey`.
  """
  user: User
}

"""
All input for the `updateDeviceByCid` mutation.
"""
input UpdateDeviceByCidInput {
  """
  Content identifier of the device identifiers. Using `@anagolay/op-an-cid(identifiers)`.
  """
  cid: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Device` being updated.
  """
  patch: DevicePatch!
}

"""
All input for the `updateDeviceByNodeId` mutation.
"""
input UpdateDeviceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Device` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Device` being updated.
  """
  patch: DevicePatch!
}

"""
All input for the `updateDevice` mutation.
"""
input UpdateDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Device` being updated.
  """
  patch: DevicePatch!
}

"""
The output of our update `Device` mutation.
"""
type UpdateDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Device` that was updated by this mutation.
  """
  device: Device

  """
  An edge for our `Device`. May be used by Relay 1.
  """
  deviceEdge(
    """
    The method to use when ordering `Device`.
    """
    orderBy: [DevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DevicesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateMediaByNodeId` mutation.
"""
input UpdateMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
}

"""
All input for the `updateMediaDeviceByMediaIdAndDeviceId` mutation.
"""
input UpdateMediaDeviceByMediaIdAndDeviceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  deviceId: Int!
  mediaId: Int!

  """
  An object where the defined keys will be set on the `MediaDevice` being updated.
  """
  patch: MediaDevicePatch!
}

"""
The output of our update `MediaDevice` mutation.
"""
type UpdateMediaDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Device` that is related to this `MediaDevice`.
  """
  device: Device

  """
  Reads a single `Media` that is related to this `MediaDevice`.
  """
  media: Media

  """
  The `MediaDevice` that was updated by this mutation.
  """
  mediaDevice: MediaDevice

  """
  An edge for our `MediaDevice`. May be used by Relay 1.
  """
  mediaDeviceEdge(
    """
    The method to use when ordering `MediaDevice`.
    """
    orderBy: [MediaDevicesOrderBy!] = [NATURAL]
  ): MediaDevicesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateMedia` mutation.
"""
input UpdateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
}

"""
The output of our update `Media` mutation.
"""
type UpdateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `Media`.
  """
  masterMedia: Media

  """
  The `Media` that was updated by this mutation.
  """
  media: Media

  """
  An edge for our `Media`. May be used by Relay 1.
  """
  mediaEdge(
    """
    The method to use when ordering `Media`.
    """
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateRenditionByCid` mutation.
"""
input UpdateRenditionByCidInput {
  """
  content address identifier @anagolay/op-an-cid npm package
  """
  cid: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Rendition` being updated.
  """
  patch: RenditionPatch!
}

"""
All input for the `updateRenditionByMediaIdAndIsMaster` mutation.
"""
input UpdateRenditionByMediaIdAndIsMasterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Every Media must hava one master rendition. Usually First one is the master. This one is served by default when viewing in the apps.
  """
  isMaster: Boolean!
  mediaId: Int!

  """
  An object where the defined keys will be set on the `Rendition` being updated.
  """
  patch: RenditionPatch!
}

"""
All input for the `updateRenditionByNodeId` mutation.
"""
input UpdateRenditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Rendition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Rendition` being updated.
  """
  patch: RenditionPatch!
}

"""
All input for the `updateRendition` mutation.
"""
input UpdateRenditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Rendition` being updated.
  """
  patch: RenditionPatch!
}

"""
The output of our update `Rendition` mutation.
"""
type UpdateRenditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Media` that is related to this `Rendition`.
  """
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Rendition` that was updated by this mutation.
  """
  rendition: Rendition

  """
  An edge for our `Rendition`. May be used by Relay 1.
  """
  renditionEdge(
    """
    The method to use when ordering `Rendition`.
    """
    orderBy: [RenditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RenditionsEdge
}

"""
All input for the `updateUserByNodeId` mutation.
"""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""
All input for the `updateUserByUsername` mutation.
"""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!

  """
  Public-facing username (or 'handle') of the user.
  """
  username: String!
}

"""
All input for the `updateUser` mutation.
"""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""
The output of our update `User` mutation.
"""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `User` that was updated by this mutation.
  """
  user: User

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A user who can log in to the application.
"""
type User implements Node {
  """
  Optional avatar URL.
  """
  avatarUrl: String
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `CryptoKey`.
  """
  cryptoKeys(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CryptoKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CryptoKeyFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `CryptoKey`.
    """
    orderBy: [CryptoKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): CryptoKeysConnection!
  familyName: String

  """
  Given or first name
  """
  givenName: String
  id: Int!

  """
  If true, the user has elevated privileges.
  """
  isAdmin: Boolean!

  """
  Public-facing name (or pseudonym) of the user.
  """
  name: String
  nickname: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `UserEmail`.
  """
  userEmails(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `UserEmail`.
    """
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """
  Public-facing username (or 'handle') of the user.
  """
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  createdAt: Datetime!
  id: Int!

  """
  A unique identifier for the user within the login service.
  """
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The login service used, e.g. `google`,`auth0`
  """
  service: String!
  updatedAt: Datetime!
}

"""
A `UserAuthentication` edge in the connection.
"""
type UserAuthenticationsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `UserAuthentication` at the end of the edge.
  """
  node: UserAuthentication!
}

"""
Methods to use when ordering `UserAuthentication`.
"""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
}

"""
Information about a user's email address.
"""
type UserEmail implements Node {
  createdAt: Datetime!

  """
  The users email address, in `a@b.c` format.
  """
  email: String!
  id: Int!

  """
  is this users primary email
  """
  isPrimary: Boolean

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """
  Reads a single `User` that is related to this `UserEmail`.
  """
  user: User
  userId: Int!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `isPrimary` field.
  """
  isPrimary: Boolean

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """
  Checks for all expressions in this list.
  """
  and: [UserEmailFilter!]

  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `isPrimary` field.
  """
  isPrimary: BooleanFilter

  """
  Negates the expression.
  """
  not: UserEmailFilter

  """
  Checks for any expressions in this list.
  """
  or: [UserEmailFilter!]

  """
  Filter by the object’s `userId` field.
  """
  userId: IntFilter
}

"""
An input for mutations affecting `UserEmail`
"""
input UserEmailInput {
  """
  The users email address, in `a@b.c` format.
  """
  email: String!
}

"""
A connection to a list of `UserEmail` values.
"""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """
  A list of `UserEmail` objects.
  """
  nodes: [UserEmail!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `UserEmail` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `UserEmail` edge in the connection.
"""
type UserEmailsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `UserEmail` at the end of the edge.
  """
  node: UserEmail!
}

"""
Methods to use when ordering `UserEmail`.
"""
enum UserEmailsOrderBy {
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  """
  Optional avatar URL.
  """
  avatarUrl: String
  createdAt: Datetime
  familyName: String

  """
  Given or first name
  """
  givenName: String

  """
  If true, the user has elevated privileges.
  """
  isAdmin: Boolean

  """
  Public-facing name (or pseudonym) of the user.
  """
  name: String
  nickname: String
  updatedAt: Datetime

  """
  Public-facing username (or 'handle') of the user.
  """
  username: String
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User!
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """
  Equal to the specified value.
  """
  equalTo: UUID

  """
  Greater than the specified value.
  """
  greaterThan: UUID

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: UUID

  """
  Included in the specified list.
  """
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Less than the specified value.
  """
  lessThan: UUID

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: UUID

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: UUID

  """
  Not equal to the specified value.
  """
  notEqualTo: UUID

  """
  Not included in the specified list.
  """
  notIn: [UUID!]
}
