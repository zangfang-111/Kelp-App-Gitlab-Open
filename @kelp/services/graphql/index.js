/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** Methods to use when ordering `AlbumMedia`. */
export var AlbumMediaOrderBy;
(function (AlbumMediaOrderBy) {
    AlbumMediaOrderBy["AlbumIdAsc"] = "ALBUM_ID_ASC";
    AlbumMediaOrderBy["AlbumIdDesc"] = "ALBUM_ID_DESC";
    AlbumMediaOrderBy["MediaIdAsc"] = "MEDIA_ID_ASC";
    AlbumMediaOrderBy["MediaIdDesc"] = "MEDIA_ID_DESC";
    AlbumMediaOrderBy["Natural"] = "NATURAL";
    AlbumMediaOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    AlbumMediaOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(AlbumMediaOrderBy || (AlbumMediaOrderBy = {}));
/** Methods to use when ordering `Album`. */
export var AlbumsOrderBy;
(function (AlbumsOrderBy) {
    AlbumsOrderBy["IdAsc"] = "ID_ASC";
    AlbumsOrderBy["IdDesc"] = "ID_DESC";
    AlbumsOrderBy["Natural"] = "NATURAL";
    AlbumsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    AlbumsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(AlbumsOrderBy || (AlbumsOrderBy = {}));
/** Methods to use when ordering `Copyright`. */
export var CopyrightsOrderBy;
(function (CopyrightsOrderBy) {
    CopyrightsOrderBy["IdAsc"] = "ID_ASC";
    CopyrightsOrderBy["IdDesc"] = "ID_DESC";
    CopyrightsOrderBy["MediaIdAsc"] = "MEDIA_ID_ASC";
    CopyrightsOrderBy["MediaIdDesc"] = "MEDIA_ID_DESC";
    CopyrightsOrderBy["Natural"] = "NATURAL";
    CopyrightsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    CopyrightsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    CopyrightsOrderBy["StatementIdAsc"] = "STATEMENT_ID_ASC";
    CopyrightsOrderBy["StatementIdDesc"] = "STATEMENT_ID_DESC";
})(CopyrightsOrderBy || (CopyrightsOrderBy = {}));
/** Methods to use when ordering `CryptoKey`. */
export var CryptoKeysOrderBy;
(function (CryptoKeysOrderBy) {
    CryptoKeysOrderBy["CidAsc"] = "CID_ASC";
    CryptoKeysOrderBy["CidDesc"] = "CID_DESC";
    CryptoKeysOrderBy["FingerprintAsc"] = "FINGERPRINT_ASC";
    CryptoKeysOrderBy["FingerprintDesc"] = "FINGERPRINT_DESC";
    CryptoKeysOrderBy["IdAsc"] = "ID_ASC";
    CryptoKeysOrderBy["IdDesc"] = "ID_DESC";
    CryptoKeysOrderBy["IsPrimaryAsc"] = "IS_PRIMARY_ASC";
    CryptoKeysOrderBy["IsPrimaryDesc"] = "IS_PRIMARY_DESC";
    CryptoKeysOrderBy["Natural"] = "NATURAL";
    CryptoKeysOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    CryptoKeysOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    CryptoKeysOrderBy["UserIdAsc"] = "USER_ID_ASC";
    CryptoKeysOrderBy["UserIdDesc"] = "USER_ID_DESC";
})(CryptoKeysOrderBy || (CryptoKeysOrderBy = {}));
/** Methods to use when ordering `Device`. */
export var DevicesOrderBy;
(function (DevicesOrderBy) {
    DevicesOrderBy["CidAsc"] = "CID_ASC";
    DevicesOrderBy["CidDesc"] = "CID_DESC";
    DevicesOrderBy["IdAsc"] = "ID_ASC";
    DevicesOrderBy["IdDesc"] = "ID_DESC";
    DevicesOrderBy["Natural"] = "NATURAL";
    DevicesOrderBy["PoeIdAsc"] = "POE_ID_ASC";
    DevicesOrderBy["PoeIdDesc"] = "POE_ID_DESC";
    DevicesOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    DevicesOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(DevicesOrderBy || (DevicesOrderBy = {}));
/** Physical device that is used to the ownership statement creation. */
export var Devicetype;
(function (Devicetype) {
    Devicetype["Camera"] = "CAMERA";
    Devicetype["Laptop"] = "LAPTOP";
    Devicetype["Lens"] = "LENS";
    Devicetype["Smartphone"] = "SMARTPHONE";
})(Devicetype || (Devicetype = {}));
/** Methods to use when ordering `LightroomCatalog`. */
export var LightroomCatalogsOrderBy;
(function (LightroomCatalogsOrderBy) {
    LightroomCatalogsOrderBy["IdAsc"] = "ID_ASC";
    LightroomCatalogsOrderBy["IdDesc"] = "ID_DESC";
    LightroomCatalogsOrderBy["Natural"] = "NATURAL";
    LightroomCatalogsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    LightroomCatalogsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(LightroomCatalogsOrderBy || (LightroomCatalogsOrderBy = {}));
/** Methods to use when ordering `LightroomCollection`. */
export var LightroomCollectionsOrderBy;
(function (LightroomCollectionsOrderBy) {
    LightroomCollectionsOrderBy["CatalogIdAsc"] = "CATALOG_ID_ASC";
    LightroomCollectionsOrderBy["CatalogIdDesc"] = "CATALOG_ID_DESC";
    LightroomCollectionsOrderBy["IdAsc"] = "ID_ASC";
    LightroomCollectionsOrderBy["IdDesc"] = "ID_DESC";
    LightroomCollectionsOrderBy["Natural"] = "NATURAL";
    LightroomCollectionsOrderBy["ParentIdAsc"] = "PARENT_ID_ASC";
    LightroomCollectionsOrderBy["ParentIdDesc"] = "PARENT_ID_DESC";
    LightroomCollectionsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    LightroomCollectionsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(LightroomCollectionsOrderBy || (LightroomCollectionsOrderBy = {}));
/** Methods to use when ordering `LightroomMedia`. */
export var LightroomMediaOrderBy;
(function (LightroomMediaOrderBy) {
    LightroomMediaOrderBy["IdAsc"] = "ID_ASC";
    LightroomMediaOrderBy["IdDesc"] = "ID_DESC";
    LightroomMediaOrderBy["MediaIdAsc"] = "MEDIA_ID_ASC";
    LightroomMediaOrderBy["MediaIdDesc"] = "MEDIA_ID_DESC";
    LightroomMediaOrderBy["Natural"] = "NATURAL";
    LightroomMediaOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    LightroomMediaOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    LightroomMediaOrderBy["UuidIdentifierAsc"] = "UUID_IDENTIFIER_ASC";
    LightroomMediaOrderBy["UuidIdentifierDesc"] = "UUID_IDENTIFIER_DESC";
})(LightroomMediaOrderBy || (LightroomMediaOrderBy = {}));
/** Methods to use when ordering `LightroomMediaUniqueness`. */
export var LightroomMediaUniquenessesOrderBy;
(function (LightroomMediaUniquenessesOrderBy) {
    LightroomMediaUniquenessesOrderBy["CatalogIdAsc"] = "CATALOG_ID_ASC";
    LightroomMediaUniquenessesOrderBy["CatalogIdDesc"] = "CATALOG_ID_DESC";
    LightroomMediaUniquenessesOrderBy["CollectionIdAsc"] = "COLLECTION_ID_ASC";
    LightroomMediaUniquenessesOrderBy["CollectionIdDesc"] = "COLLECTION_ID_DESC";
    LightroomMediaUniquenessesOrderBy["LocalIdentifierAsc"] = "LOCAL_IDENTIFIER_ASC";
    LightroomMediaUniquenessesOrderBy["LocalIdentifierDesc"] = "LOCAL_IDENTIFIER_DESC";
    LightroomMediaUniquenessesOrderBy["LrMediaAsc"] = "LR_MEDIA_ASC";
    LightroomMediaUniquenessesOrderBy["LrMediaDesc"] = "LR_MEDIA_DESC";
    LightroomMediaUniquenessesOrderBy["Natural"] = "NATURAL";
})(LightroomMediaUniquenessesOrderBy || (LightroomMediaUniquenessesOrderBy = {}));
/** Methods to use when ordering `MediaDevice`. */
export var MediaDevicesOrderBy;
(function (MediaDevicesOrderBy) {
    MediaDevicesOrderBy["DeviceIdAsc"] = "DEVICE_ID_ASC";
    MediaDevicesOrderBy["DeviceIdDesc"] = "DEVICE_ID_DESC";
    MediaDevicesOrderBy["MediaIdAsc"] = "MEDIA_ID_ASC";
    MediaDevicesOrderBy["MediaIdDesc"] = "MEDIA_ID_DESC";
    MediaDevicesOrderBy["Natural"] = "NATURAL";
})(MediaDevicesOrderBy || (MediaDevicesOrderBy = {}));
/** Methods to use when ordering `Media`. */
export var MediaOrderBy;
(function (MediaOrderBy) {
    MediaOrderBy["DateCreatedAsc"] = "DATE_CREATED_ASC";
    MediaOrderBy["DateCreatedDesc"] = "DATE_CREATED_DESC";
    MediaOrderBy["IdAsc"] = "ID_ASC";
    MediaOrderBy["IdDesc"] = "ID_DESC";
    MediaOrderBy["IsVideoAsc"] = "IS_VIDEO_ASC";
    MediaOrderBy["IsVideoDesc"] = "IS_VIDEO_DESC";
    MediaOrderBy["MasterMediaIdAsc"] = "MASTER_MEDIA_ID_ASC";
    MediaOrderBy["MasterMediaIdDesc"] = "MASTER_MEDIA_ID_DESC";
    MediaOrderBy["Natural"] = "NATURAL";
    MediaOrderBy["PhashAsc"] = "PHASH_ASC";
    MediaOrderBy["PhashDesc"] = "PHASH_DESC";
    MediaOrderBy["PoeIdAsc"] = "POE_ID_ASC";
    MediaOrderBy["PoeIdDesc"] = "POE_ID_DESC";
    MediaOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    MediaOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(MediaOrderBy || (MediaOrderBy = {}));
/** Methods to use when ordering `Rendition`. */
export var RenditionsOrderBy;
(function (RenditionsOrderBy) {
    RenditionsOrderBy["CidAsc"] = "CID_ASC";
    RenditionsOrderBy["CidDesc"] = "CID_DESC";
    RenditionsOrderBy["IdAsc"] = "ID_ASC";
    RenditionsOrderBy["IdDesc"] = "ID_DESC";
    RenditionsOrderBy["IsMasterAsc"] = "IS_MASTER_ASC";
    RenditionsOrderBy["IsMasterDesc"] = "IS_MASTER_DESC";
    RenditionsOrderBy["MediaIdAsc"] = "MEDIA_ID_ASC";
    RenditionsOrderBy["MediaIdDesc"] = "MEDIA_ID_DESC";
    RenditionsOrderBy["Natural"] = "NATURAL";
    RenditionsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    RenditionsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(RenditionsOrderBy || (RenditionsOrderBy = {}));
/** Methods to use when ordering `UserAuthentication`. */
export var UserAuthenticationsOrderBy;
(function (UserAuthenticationsOrderBy) {
    UserAuthenticationsOrderBy["IdAsc"] = "ID_ASC";
    UserAuthenticationsOrderBy["IdDesc"] = "ID_DESC";
    UserAuthenticationsOrderBy["Natural"] = "NATURAL";
    UserAuthenticationsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    UserAuthenticationsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    UserAuthenticationsOrderBy["ServiceAsc"] = "SERVICE_ASC";
    UserAuthenticationsOrderBy["ServiceDesc"] = "SERVICE_DESC";
})(UserAuthenticationsOrderBy || (UserAuthenticationsOrderBy = {}));
/** Methods to use when ordering `UserEmail`. */
export var UserEmailsOrderBy;
(function (UserEmailsOrderBy) {
    UserEmailsOrderBy["IdAsc"] = "ID_ASC";
    UserEmailsOrderBy["IdDesc"] = "ID_DESC";
    UserEmailsOrderBy["IsPrimaryAsc"] = "IS_PRIMARY_ASC";
    UserEmailsOrderBy["IsPrimaryDesc"] = "IS_PRIMARY_DESC";
    UserEmailsOrderBy["Natural"] = "NATURAL";
    UserEmailsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    UserEmailsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    UserEmailsOrderBy["UserIdAsc"] = "USER_ID_ASC";
    UserEmailsOrderBy["UserIdDesc"] = "USER_ID_DESC";
})(UserEmailsOrderBy || (UserEmailsOrderBy = {}));
/** Methods to use when ordering `User`. */
export var UsersOrderBy;
(function (UsersOrderBy) {
    UsersOrderBy["IdAsc"] = "ID_ASC";
    UsersOrderBy["IdDesc"] = "ID_DESC";
    UsersOrderBy["Natural"] = "NATURAL";
    UsersOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    UsersOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
    UsersOrderBy["UsernameAsc"] = "USERNAME_ASC";
    UsersOrderBy["UsernameDesc"] = "USERNAME_DESC";
})(UsersOrderBy || (UsersOrderBy = {}));
/** Methods to use when ordering `_AlbumLightroomCollection`. */
export var _AlbumLightroomCollectionsOrderBy;
(function (_AlbumLightroomCollectionsOrderBy) {
    _AlbumLightroomCollectionsOrderBy["AlbumIdAsc"] = "ALBUM_ID_ASC";
    _AlbumLightroomCollectionsOrderBy["AlbumIdDesc"] = "ALBUM_ID_DESC";
    _AlbumLightroomCollectionsOrderBy["CollectionIdAsc"] = "COLLECTION_ID_ASC";
    _AlbumLightroomCollectionsOrderBy["CollectionIdDesc"] = "COLLECTION_ID_DESC";
    _AlbumLightroomCollectionsOrderBy["Natural"] = "NATURAL";
})(_AlbumLightroomCollectionsOrderBy || (_AlbumLightroomCollectionsOrderBy = {}));
export const BasicAlbumInfoFragmentFragmentDoc = gql `
    fragment BasicAlbumInfoFragment on Album {
  nodeId
  id
  title
}
    `;
export const ExtendedAlbumInfoFragmentFragmentDoc = gql `
    fragment ExtendedAlbumInfoFragment on Album {
  nodeId
  id
  cid
  slug
  title
  description
  isPrivate
  isSmart
  smartRules
  metadata
  createdAt
  updatedAt
}
    `;
export const CryptoKeyBasicFragmentFragmentDoc = gql `
    fragment CryptoKeyBasicFragment on CryptoKey {
  nodeId
  id
  cid
  isPrimary
  publicKey
  privateKey
  keyId
  name
  slug
  implementation
}
    `;
export const CryptoKeyExtendedFragmentFragmentDoc = gql `
    fragment CryptoKeyExtendedFragment on CryptoKey {
  algorithm
  creationTime
  curve
  expirationTime
  fingerprint
  createdAt
  updatedAt
}
    `;
export const BasicDeviceInfoFragmentDoc = gql `
    fragment BasicDeviceInfo on Device {
  id
  nodeId
  cid
}
    `;
export const FullDeviceInfoFragmentDoc = gql `
    fragment FullDeviceInfo on Device {
  ...BasicDeviceInfo
  identifiers
  deviceType
  createdAt
  maker
  model
  name
  ownership {
    id
    pallet
  }
  ownershipVerified
  ownershipCreatedAt
  poeId
}
    ${BasicDeviceInfoFragmentDoc}`;
export const PageInfoFragmentFragmentDoc = gql `
    fragment PageInfoFragment on PageInfo {
  endCursor
  hasNextPage
  hasPreviousPage
  startCursor
}
    `;
export const BasicMediaInfoFragmentFragmentDoc = gql `
    fragment BasicMediaInfoFragment on Media {
  nodeId
  id
  title
  headline
  caption
}
    `;
export const MasterRenditionFragmentFragmentDoc = gql `
    fragment MasterRenditionFragment on Rendition {
  cid
  imageStoragePath
  src @client
  width
  height
  isMaster
  aspectRatio
}
    `;
export const BasicMediaInfoFragmentWithMasterRenditionFragmentDoc = gql `
    fragment BasicMediaInfoFragmentWithMasterRendition on Media {
  ...BasicMediaInfoFragment
  renditions(filter: {isMaster: {equalTo: true}}) {
    nodes {
      ...MasterRenditionFragment
    }
  }
}
    ${BasicMediaInfoFragmentFragmentDoc}
${MasterRenditionFragmentFragmentDoc}`;
export const BasicLIghtroomCatalogInfoFragmentDoc = gql `
    fragment BasicLIghtroomCatalogInfo on LightroomCatalog {
  nodeId
  id
  name
  slug
  createdAt
  updatedAt
}
    `;
export const LightroomCatalogWithCollectionsFragmentDoc = gql `
    fragment LightroomCatalogWithCollections on LightroomCatalog {
  nodeId
  id
  collections
  collectionSets
}
    `;
export const BasicLIghtroomCollectionInfoFragmentDoc = gql `
    fragment BasicLIghtroomCollectionInfo on LightroomCollection {
  nodeId
  id
  title
  slug
  searchDescription
  createdAt
  updatedAt
  albumList {
    edges {
      node {
        id
      }
    }
  }
}
    `;
export const BasicLIghtroomMediaInfoFragmentDoc = gql `
    fragment BasicLIghtroomMediaInfo on LightroomMedia {
  id
  nodeId
  mediaId
  uuidIdentifier
}
    `;
export const GetAlbumsDocument = gql `
    query GetAlbums {
  albums {
    nodes {
      ...BasicAlbumInfoFragment
      media(first: 1, filter: {isVideo: {equalTo: false}}) {
        nodes {
          ...BasicMediaInfoFragmentWithMasterRendition
        }
      }
    }
  }
}
    ${BasicAlbumInfoFragmentFragmentDoc}
${BasicMediaInfoFragmentWithMasterRenditionFragmentDoc}`;
/**
 * __useGetAlbumsQuery__
 *
 * To run a query within a React component, call `useGetAlbumsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlbumsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAlbumsQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetAlbumsDocument, options);
}
export function useGetAlbumsLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetAlbumsDocument, options);
}
export function refetchGetAlbumsQuery(variables) {
    return { query: GetAlbumsDocument, variables: variables };
}
export const GetAlbumDetailsDocument = gql `
    query GetAlbumDetails($id: Int!) {
  album(id: $id) {
    ...ExtendedAlbumInfoFragment
    media(orderBy: DATE_CREATED_DESC) {
      nodes {
        ...BasicMediaInfoFragmentWithMasterRendition
      }
    }
  }
}
    ${ExtendedAlbumInfoFragmentFragmentDoc}
${BasicMediaInfoFragmentWithMasterRenditionFragmentDoc}`;
/**
 * __useGetAlbumDetailsQuery__
 *
 * To run a query within a React component, call `useGetAlbumDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlbumDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlbumDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAlbumDetailsQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetAlbumDetailsDocument, options);
}
export function useGetAlbumDetailsLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetAlbumDetailsDocument, options);
}
export function refetchGetAlbumDetailsQuery(variables) {
    return { query: GetAlbumDetailsDocument, variables: variables };
}
export const UpdateMediaCopyrightDocument = gql `
    mutation UpdateMediaCopyright($input: [MediaCopyright!]!) {
  updateMediaCopyright(input: $input) {
    success
    inserted
    passed
  }
}
    `;
/**
 * __useUpdateMediaCopyrightMutation__
 *
 * To run a mutation, you first call `useUpdateMediaCopyrightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMediaCopyrightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMediaCopyrightMutation, { data, loading, error }] = useUpdateMediaCopyrightMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateMediaCopyrightMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(UpdateMediaCopyrightDocument, options);
}
export const GetMyCryptoKeysBasicDocument = gql `
    query GetMyCryptoKeysBasic {
  cryptoKeys {
    totalCount
    nodes {
      ...CryptoKeyBasicFragment
    }
  }
}
    ${CryptoKeyBasicFragmentFragmentDoc}`;
/**
 * __useGetMyCryptoKeysBasicQuery__
 *
 * To run a query within a React component, call `useGetMyCryptoKeysBasicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMyCryptoKeysBasicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMyCryptoKeysBasicQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMyCryptoKeysBasicQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetMyCryptoKeysBasicDocument, options);
}
export function useGetMyCryptoKeysBasicLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetMyCryptoKeysBasicDocument, options);
}
export function refetchGetMyCryptoKeysBasicQuery(variables) {
    return { query: GetMyCryptoKeysBasicDocument, variables: variables };
}
export const GetMyCryptoKeysExtendedDocument = gql `
    query GetMyCryptoKeysExtended {
  cryptoKeys {
    totalCount
    nodes {
      ...CryptoKeyBasicFragment
      ...CryptoKeyExtendedFragment
    }
  }
}
    ${CryptoKeyBasicFragmentFragmentDoc}
${CryptoKeyExtendedFragmentFragmentDoc}`;
/**
 * __useGetMyCryptoKeysExtendedQuery__
 *
 * To run a query within a React component, call `useGetMyCryptoKeysExtendedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMyCryptoKeysExtendedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMyCryptoKeysExtendedQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMyCryptoKeysExtendedQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetMyCryptoKeysExtendedDocument, options);
}
export function useGetMyCryptoKeysExtendedLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetMyCryptoKeysExtendedDocument, options);
}
export function refetchGetMyCryptoKeysExtendedQuery(variables) {
    return { query: GetMyCryptoKeysExtendedDocument, variables: variables };
}
export const MyDevicesDocument = gql `
    query MyDevices {
  devices {
    totalCount
    nodes {
      ...FullDeviceInfo
    }
  }
}
    ${FullDeviceInfoFragmentDoc}`;
/**
 * __useMyDevicesQuery__
 *
 * To run a query within a React component, call `useMyDevicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyDevicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyDevicesQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyDevicesQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MyDevicesDocument, options);
}
export function useMyDevicesLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MyDevicesDocument, options);
}
export function refetchMyDevicesQuery(variables) {
    return { query: MyDevicesDocument, variables: variables };
}
export const PoCloForVerificationDocument = gql `
    query PoCloForVerification($ids: [String!]) {
  devices(filter: {cid: {in: $ids}}) {
    totalCount
    nodes {
      ...FullDeviceInfo
    }
  }
}
    ${FullDeviceInfoFragmentDoc}`;
/**
 * __usePoCloForVerificationQuery__
 *
 * To run a query within a React component, call `usePoCloForVerificationQuery` and pass it any options that fit your needs.
 * When your component renders, `usePoCloForVerificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePoCloForVerificationQuery({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function usePoCloForVerificationQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(PoCloForVerificationDocument, options);
}
export function usePoCloForVerificationLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(PoCloForVerificationDocument, options);
}
export function refetchPoCloForVerificationQuery(variables) {
    return { query: PoCloForVerificationDocument, variables: variables };
}
export const AddOwnershipToDevicesDocument = gql `
    mutation AddOwnershipToDevices($cid: String!, $statementId: String!, $pallet: String!, $verified: Boolean!, $createdAt: Datetime!) {
  updateDeviceByCid(
    input: {patch: {ownership: {id: $statementId, pallet: $pallet}, ownershipCreatedAt: $createdAt, ownershipVerified: $verified}, cid: $cid}
  ) {
    clientMutationId
    device {
      ...FullDeviceInfo
    }
  }
}
    ${FullDeviceInfoFragmentDoc}`;
/**
 * __useAddOwnershipToDevicesMutation__
 *
 * To run a mutation, you first call `useAddOwnershipToDevicesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddOwnershipToDevicesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addOwnershipToDevicesMutation, { data, loading, error }] = useAddOwnershipToDevicesMutation({
 *   variables: {
 *      cid: // value for 'cid'
 *      statementId: // value for 'statementId'
 *      pallet: // value for 'pallet'
 *      verified: // value for 'verified'
 *      createdAt: // value for 'createdAt'
 *   },
 * });
 */
export function useAddOwnershipToDevicesMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(AddOwnershipToDevicesDocument, options);
}
export const IsLoggedInQueryDocument = gql `
    query IsLoggedInQuery {
  isLoggedIn @client
}
    `;
/**
 * __useIsLoggedInQueryQuery__
 *
 * To run a query within a React component, call `useIsLoggedInQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useIsLoggedInQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIsLoggedInQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useIsLoggedInQueryQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(IsLoggedInQueryDocument, options);
}
export function useIsLoggedInQueryLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(IsLoggedInQueryDocument, options);
}
export function refetchIsLoggedInQueryQuery(variables) {
    return { query: IsLoggedInQueryDocument, variables: variables };
}
export const ActiveNotificationDocument = gql `
    query ActiveNotification {
  notifications @client {
    id
    message
    expiration
    error
  }
}
    `;
/**
 * __useActiveNotificationQuery__
 *
 * To run a query within a React component, call `useActiveNotificationQuery` and pass it any options that fit your needs.
 * When your component renders, `useActiveNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActiveNotificationQuery({
 *   variables: {
 *   },
 * });
 */
export function useActiveNotificationQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(ActiveNotificationDocument, options);
}
export function useActiveNotificationLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(ActiveNotificationDocument, options);
}
export function refetchActiveNotificationQuery(variables) {
    return { query: ActiveNotificationDocument, variables: variables };
}
export const SelectedMediaDocument = gql `
    query SelectedMedia {
  selectedMedia @client
}
    `;
/**
 * __useSelectedMediaQuery__
 *
 * To run a query within a React component, call `useSelectedMediaQuery` and pass it any options that fit your needs.
 * When your component renders, `useSelectedMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSelectedMediaQuery({
 *   variables: {
 *   },
 * });
 */
export function useSelectedMediaQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(SelectedMediaDocument, options);
}
export function useSelectedMediaLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(SelectedMediaDocument, options);
}
export function refetchSelectedMediaQuery(variables) {
    return { query: SelectedMediaDocument, variables: variables };
}
export const MediaPreviewDocument = gql `
    query MediaPreview($id: Int!) {
  media(id: $id) {
    ...BasicMediaInfoFragment
    aperture
    focalLength
    shutterSpeed
    didFlashFired
    exposureTime
    exposureBias
    exposureProgram
    meteringMode
    isoSpeedRating
    gps
    keywords
    isVideo
    dateCreated
    devices {
      nodes {
        nodeId
        id
        cid
        deviceType
        identifiers
        maker
        model
        name
      }
    }
    albums {
      nodes {
        nodeId
        id
        cid
        description
        slug
        title
      }
    }
    renditions(filter: {isMaster: {equalTo: true}}) {
      nodes {
        nodeId
        id
        size
        fileFormat
        ...MasterRenditionFragment
      }
    }
  }
}
    ${BasicMediaInfoFragmentFragmentDoc}
${MasterRenditionFragmentFragmentDoc}`;
/**
 * __useMediaPreviewQuery__
 *
 * To run a query within a React component, call `useMediaPreviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useMediaPreviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMediaPreviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMediaPreviewQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MediaPreviewDocument, options);
}
export function useMediaPreviewLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MediaPreviewDocument, options);
}
export function refetchMediaPreviewQuery(variables) {
    return { query: MediaPreviewDocument, variables: variables };
}
export const MediaKeywordsDocument = gql `
    query MediaKeywords($id: Int!) {
  media(id: $id) {
    keywords
  }
}
    `;
/**
 * __useMediaKeywordsQuery__
 *
 * To run a query within a React component, call `useMediaKeywordsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMediaKeywordsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMediaKeywordsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMediaKeywordsQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MediaKeywordsDocument, options);
}
export function useMediaKeywordsLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MediaKeywordsDocument, options);
}
export function refetchMediaKeywordsQuery(variables) {
    return { query: MediaKeywordsDocument, variables: variables };
}
export const MediaCopyrightsDocument = gql `
    query MediaCopyrights($id: Int!) {
  media(id: $id) {
    id
    nodeId
    copyrights {
      nodes {
        nodeId
        id
        statementId
        signer
      }
      totalCount
    }
  }
}
    `;
/**
 * __useMediaCopyrightsQuery__
 *
 * To run a query within a React component, call `useMediaCopyrightsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMediaCopyrightsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMediaCopyrightsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMediaCopyrightsQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MediaCopyrightsDocument, options);
}
export function useMediaCopyrightsLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MediaCopyrightsDocument, options);
}
export function refetchMediaCopyrightsQuery(variables) {
    return { query: MediaCopyrightsDocument, variables: variables };
}
export const MediaReadyForCopyrightDocument = gql `
    query MediaReadyForCopyright {
  mediaReadyForCopyright {
    totalCount
    nodes {
      nodeId
      id
      poeId
      renditions(filter: {isMaster: {equalTo: true}}) {
        nodes {
          cid
          src @client
        }
      }
    }
  }
}
    `;
/**
 * __useMediaReadyForCopyrightQuery__
 *
 * To run a query within a React component, call `useMediaReadyForCopyrightQuery` and pass it any options that fit your needs.
 * When your component renders, `useMediaReadyForCopyrightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMediaReadyForCopyrightQuery({
 *   variables: {
 *   },
 * });
 */
export function useMediaReadyForCopyrightQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MediaReadyForCopyrightDocument, options);
}
export function useMediaReadyForCopyrightLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MediaReadyForCopyrightDocument, options);
}
export function refetchMediaReadyForCopyrightQuery(variables) {
    return { query: MediaReadyForCopyrightDocument, variables: variables };
}
export const CreateRenditionDocument = gql `
    mutation CreateRendition($cid: String!, $pixelCid: String!, $metadataCid: String!, $height: Int!, $width: Int!, $imageStoragePath: String!, $metadataStoragePath: String!, $isMaster: Boolean, $fileFormat: String, $mediaId: Int!) {
  __typename
  createRendition(
    input: {rendition: {cid: $cid, pixelCid: $pixelCid, metadataCid: $metadataCid, height: $height, width: $width, imageStoragePath: $imageStoragePath, metadataStoragePath: $metadataStoragePath, isMaster: $isMaster, fileFormat: $fileFormat, mediaId: $mediaId}}
  ) {
    rendition {
      id
      cid
    }
  }
}
    `;
/**
 * __useCreateRenditionMutation__
 *
 * To run a mutation, you first call `useCreateRenditionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRenditionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRenditionMutation, { data, loading, error }] = useCreateRenditionMutation({
 *   variables: {
 *      cid: // value for 'cid'
 *      pixelCid: // value for 'pixelCid'
 *      metadataCid: // value for 'metadataCid'
 *      height: // value for 'height'
 *      width: // value for 'width'
 *      imageStoragePath: // value for 'imageStoragePath'
 *      metadataStoragePath: // value for 'metadataStoragePath'
 *      isMaster: // value for 'isMaster'
 *      fileFormat: // value for 'fileFormat'
 *      mediaId: // value for 'mediaId'
 *   },
 * });
 */
export function useCreateRenditionMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(CreateRenditionDocument, options);
}
export const GetRenditionByCidDocument = gql `
    query GetRenditionByCid($cid: String!) {
  renditionByCid(cid: $cid) {
    nodeId
    id
    mediaId
    ...MasterRenditionFragment
  }
}
    ${MasterRenditionFragmentFragmentDoc}`;
/**
 * __useGetRenditionByCidQuery__
 *
 * To run a query within a React component, call `useGetRenditionByCidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRenditionByCidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRenditionByCidQuery({
 *   variables: {
 *      cid: // value for 'cid'
 *   },
 * });
 */
export function useGetRenditionByCidQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetRenditionByCidDocument, options);
}
export function useGetRenditionByCidLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetRenditionByCidDocument, options);
}
export function refetchGetRenditionByCidQuery(variables) {
    return { query: GetRenditionByCidDocument, variables: variables };
}
export const TimelineMediaDocument = gql `
    query TimelineMedia($first: Int!, $after: Cursor) {
  medias(first: $first, after: $after, orderBy: DATE_CREATED_DESC) {
    nodes {
      ...BasicMediaInfoFragmentWithMasterRendition
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}
    ${BasicMediaInfoFragmentWithMasterRenditionFragmentDoc}
${PageInfoFragmentFragmentDoc}`;
/**
 * __useTimelineMediaQuery__
 *
 * To run a query within a React component, call `useTimelineMediaQuery` and pass it any options that fit your needs.
 * When your component renders, `useTimelineMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTimelineMediaQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTimelineMediaQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(TimelineMediaDocument, options);
}
export function useTimelineMediaLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(TimelineMediaDocument, options);
}
export function refetchTimelineMediaQuery(variables) {
    return { query: TimelineMediaDocument, variables: variables };
}
export const MeDocument = gql `
    query Me {
  me {
    nodeId
    id
    givenName
    username
    avatarUrl
    createdAt
    isAdmin
    name
    userEmails(first: 1) {
      nodes {
        nodeId
        email
      }
    }
  }
}
    `;
/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(MeDocument, options);
}
export function useMeLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(MeDocument, options);
}
export function refetchMeQuery(variables) {
    return { query: MeDocument, variables: variables };
}
export const RegisterDocument = gql `
    mutation Register($input: RegisterInput!) {
  register(input: $input) {
    user {
      nodeId
      id
      givenName
      familyName
      nickname
      username
      avatarUrl
    }
  }
}
    `;
/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRegisterMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(RegisterDocument, options);
}
export const LightroomCatalogDocument = gql `
    query LightroomCatalog($id: Int!) {
  lightroomCatalog(id: $id) {
    ...BasicLIghtroomCatalogInfo
    ...LightroomCatalogWithCollections
  }
}
    ${BasicLIghtroomCatalogInfoFragmentDoc}
${LightroomCatalogWithCollectionsFragmentDoc}`;
/**
 * __useLightroomCatalogQuery__
 *
 * To run a query within a React component, call `useLightroomCatalogQuery` and pass it any options that fit your needs.
 * When your component renders, `useLightroomCatalogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLightroomCatalogQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLightroomCatalogQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(LightroomCatalogDocument, options);
}
export function useLightroomCatalogLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(LightroomCatalogDocument, options);
}
export function refetchLightroomCatalogQuery(variables) {
    return { query: LightroomCatalogDocument, variables: variables };
}
export const SyncLightroomCatalogDocument = gql `
    mutation SyncLightroomCatalog($id: Int, $name: String!, $tags: [String], $collections: JSON!, $collectionSets: JSON!) {
  lightroomSyncCatalog(
    input: {id: $id, name: $name, tags: $tags, collections: $collections, collectionSets: $collectionSets}
  ) {
    catalog {
      ...BasicLIghtroomCatalogInfo
    }
  }
}
    ${BasicLIghtroomCatalogInfoFragmentDoc}`;
/**
 * __useSyncLightroomCatalogMutation__
 *
 * To run a mutation, you first call `useSyncLightroomCatalogMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncLightroomCatalogMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncLightroomCatalogMutation, { data, loading, error }] = useSyncLightroomCatalogMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      tags: // value for 'tags'
 *      collections: // value for 'collections'
 *      collectionSets: // value for 'collectionSets'
 *   },
 * });
 */
export function useSyncLightroomCatalogMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(SyncLightroomCatalogDocument, options);
}
export const SyncLightroomCollectionDocument = gql `
    mutation SyncLightroomCollection($id: Int, $title: String!, $catalogId: Int!, $localIdentifier: Int!, $searchDescription: JSON, $isSmart: Boolean) {
  lightroomSyncCollection(
    input: {id: $id, title: $title, catalogId: $catalogId, localIdentifier: $localIdentifier, isSmart: $isSmart, searchDescription: $searchDescription}
  ) {
    collection {
      ...BasicLIghtroomCollectionInfo
    }
  }
}
    ${BasicLIghtroomCollectionInfoFragmentDoc}`;
/**
 * __useSyncLightroomCollectionMutation__
 *
 * To run a mutation, you first call `useSyncLightroomCollectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncLightroomCollectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncLightroomCollectionMutation, { data, loading, error }] = useSyncLightroomCollectionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      title: // value for 'title'
 *      catalogId: // value for 'catalogId'
 *      localIdentifier: // value for 'localIdentifier'
 *      searchDescription: // value for 'searchDescription'
 *      isSmart: // value for 'isSmart'
 *   },
 * });
 */
export function useSyncLightroomCollectionMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(SyncLightroomCollectionDocument, options);
}
export const SyncLightroomMediaDocument = gql `
    mutation SyncLightroomMedia($mediaId: Int, $lrUuidIdentifier: String!, $currentCollectionId: Int!, $catalogId: Int!, $localIdentifier: Int!, $title: String, $headline: String, $caption: String, $isVirtualCopy: Boolean, $masterMedia: LightroomMasterMediaInputPayload, $gps: GpsInputPayload) {
  lightroomSyncMedia(
    input: {mediaId: $mediaId, lrUuidIdentifier: $lrUuidIdentifier, currentCollectionId: $currentCollectionId, catalogId: $catalogId, localIdentifier: $localIdentifier, title: $title, headline: $headline, caption: $caption, isVirtualCopy: $isVirtualCopy, masterMedia: $masterMedia, gps: $gps}
  ) {
    media {
      nodeId
      id
      mediaId
      updatedAt
    }
  }
}
    `;
/**
 * __useSyncLightroomMediaMutation__
 *
 * To run a mutation, you first call `useSyncLightroomMediaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncLightroomMediaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncLightroomMediaMutation, { data, loading, error }] = useSyncLightroomMediaMutation({
 *   variables: {
 *      mediaId: // value for 'mediaId'
 *      lrUuidIdentifier: // value for 'lrUuidIdentifier'
 *      currentCollectionId: // value for 'currentCollectionId'
 *      catalogId: // value for 'catalogId'
 *      localIdentifier: // value for 'localIdentifier'
 *      title: // value for 'title'
 *      headline: // value for 'headline'
 *      caption: // value for 'caption'
 *      isVirtualCopy: // value for 'isVirtualCopy'
 *      masterMedia: // value for 'masterMedia'
 *      gps: // value for 'gps'
 *   },
 * });
 */
export function useSyncLightroomMediaMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(SyncLightroomMediaDocument, options);
}
export const LightroomRemoveMediaFromCollectionDocument = gql `
    mutation LightroomRemoveMediaFromCollection($mediaId: Int!, $lrCollectionId: Int!) {
  lightroomRemoveMediaFromCollection(
    input: {mediaId: $mediaId, lrCollectionId: $lrCollectionId}
  ) {
    deleted
  }
}
    `;
/**
 * __useLightroomRemoveMediaFromCollectionMutation__
 *
 * To run a mutation, you first call `useLightroomRemoveMediaFromCollectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLightroomRemoveMediaFromCollectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [lightroomRemoveMediaFromCollectionMutation, { data, loading, error }] = useLightroomRemoveMediaFromCollectionMutation({
 *   variables: {
 *      mediaId: // value for 'mediaId'
 *      lrCollectionId: // value for 'lrCollectionId'
 *   },
 * });
 */
export function useLightroomRemoveMediaFromCollectionMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(LightroomRemoveMediaFromCollectionDocument, options);
}
export const SyncRenditionDocument = gql `
    mutation SyncRendition($renditionId: Int, $mediaId: Int!, $cid: String!, $height: Int!, $width: Int!, $imageStoragePath: String!, $fileFormat: String!, $fileName: String!, $fileVersion: String!, $isMaster: Boolean!, $isSmartPreview: Boolean, $size: Int!) {
  lightroomSyncRendition(
    rendition: {mediaId: $mediaId, cid: $cid, height: $height, width: $width, imageStoragePath: $imageStoragePath, fileFormat: $fileFormat, fileName: $fileName, fileVersion: $fileVersion, isMaster: $isMaster, isSmartPreview: $isSmartPreview, size: $size}
    renditionId: $renditionId
  ) {
    rendition {
      id
      nodeId
      mediaId
      updatedAt
    }
  }
}
    `;
/**
 * __useSyncRenditionMutation__
 *
 * To run a mutation, you first call `useSyncRenditionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncRenditionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncRenditionMutation, { data, loading, error }] = useSyncRenditionMutation({
 *   variables: {
 *      renditionId: // value for 'renditionId'
 *      mediaId: // value for 'mediaId'
 *      cid: // value for 'cid'
 *      height: // value for 'height'
 *      width: // value for 'width'
 *      imageStoragePath: // value for 'imageStoragePath'
 *      fileFormat: // value for 'fileFormat'
 *      fileName: // value for 'fileName'
 *      fileVersion: // value for 'fileVersion'
 *      isMaster: // value for 'isMaster'
 *      isSmartPreview: // value for 'isSmartPreview'
 *      size: // value for 'size'
 *   },
 * });
 */
export function useSyncRenditionMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(SyncRenditionDocument, options);
}
export const GetRenditionByCidWithMediaDocument = gql `
    query GetRenditionByCidWithMedia($cid: String!) {
  rendition: renditionByCid(cid: $cid) {
    nodeId
    id
    cid
    height
    imageStoragePath
    isMaster
    width
    updatedAt
    media {
      nodeId
      id
      copyrights {
        nodes {
          id
          nodeId
          statementId
          signer
        }
      }
    }
  }
}
    `;
/**
 * __useGetRenditionByCidWithMediaQuery__
 *
 * To run a query within a React component, call `useGetRenditionByCidWithMediaQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRenditionByCidWithMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRenditionByCidWithMediaQuery({
 *   variables: {
 *      cid: // value for 'cid'
 *   },
 * });
 */
export function useGetRenditionByCidWithMediaQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(GetRenditionByCidWithMediaDocument, options);
}
export function useGetRenditionByCidWithMediaLazyQuery(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(GetRenditionByCidWithMediaDocument, options);
}
export function refetchGetRenditionByCidWithMediaQuery(variables) {
    return { query: GetRenditionByCidWithMediaDocument, variables: variables };
}
export const CreateDeviceDocument = gql `
    mutation CreateDevice($cid: String!, $deviceType: Devicetype!, $identifiers: JSON, $maker: String, $model: String, $name: String) {
  createDevice(
    input: {device: {cid: $cid, deviceType: $deviceType, identifiers: $identifiers, maker: $maker, model: $model, name: $name}}
  ) {
    device {
      nodeId
      id
    }
  }
}
    `;
/**
 * __useCreateDeviceMutation__
 *
 * To run a mutation, you first call `useCreateDeviceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDeviceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDeviceMutation, { data, loading, error }] = useCreateDeviceMutation({
 *   variables: {
 *      cid: // value for 'cid'
 *      deviceType: // value for 'deviceType'
 *      identifiers: // value for 'identifiers'
 *      maker: // value for 'maker'
 *      model: // value for 'model'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useCreateDeviceMutation(baseOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), baseOptions);
    return Apollo.useMutation(CreateDeviceDocument, options);
}
//# sourceMappingURL=index.js.map